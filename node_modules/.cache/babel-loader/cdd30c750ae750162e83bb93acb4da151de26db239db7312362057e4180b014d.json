{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{initializeApp}from'firebase/app';import{getAuth,signInAnonymously,signInWithCustomToken,onAuthStateChanged}from'firebase/auth';import{getFirestore,doc,setDoc,getDoc,collection,query,onSnapshot,serverTimestamp,addDoc,getDocs,deleteDoc,where,runTransaction}from'firebase/firestore';// ====================================================================\n// Firebase configuration information - 수정 금지\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const defaultFirebaseConfig={apiKey:\"AIzaSyBNJtmpRWzjobrY556bnHkwbZmpFJqgPX8\",authDomain:\"text-adventure-game-cb731.firebaseapp.com\",projectId:\"text-adventure-game-cb731\",storageBucket:\"text-adventure-game-cb731.appspot.com\",messagingSenderId:\"1092941614820\",appId:\"1:1092941614820:web:5545f36014b73c268026f1\",measurementId:\"G-FNGF42T1FP\"};// 수정금지\nconst firebaseConfig=defaultFirebaseConfig;const appId=firebaseConfig.projectId;const initialAuthToken=null;// ====================================================================\nconst professions={'1':{name:'몰락한 귀족/기사',motivation:'가문의 몰락 원인을 조사하고, 잃어버린 가문의 보물을 찾아야 합니다.'},'2':{name:'평범한 마을 사람/농부',motivation:'갑자기 마을에 나타난 괴생명체로부터 마을을 지켜야 합니다.'},'3':{name:'젊은 마법사/견습생',motivation:'스승님의 실종에 대한 단서를 찾아야 합니다.'},'4':{name:'용병/모험가',motivation:'의뢰받은 임무를 수행하던 중 예상치 못한 사건에 휘말렸습니다.'},'5':{name:'도적/암살자',motivation:'길드에서 내려온 첫 번째 임무를 완수하고, 그 과정에서 수상한 음모를 감지해야 합니다.'},'6':{name:'왕족/공주/왕자',motivation:'왕실 내의 불화와 암투 속에서 자신의 입지를 다져야 합니다.'}};// Firestore 경로 유틸\nconst getMainScenarioRef=(db,appId)=>doc(db,'artifacts',appId,'public','data','mainScenario','main');const getPrivatePlayerStateRef=(db,appId,userId)=>doc(db,'artifacts',appId,'users',userId,'playerState','state');// 상태 초기화 유틸\nconst getDefaultGameState=()=>({phase:'characterSelection',log:[// 로그 구조를 이벤트 객체로 변경\n{actor:{displayName:'게임 마스터'},action:'게임 시작',publicStory:\"환영합니다! 당신은 중세 유럽풍 판타지 왕국의 모험가가 될 것입니다. 당신은 지금 '방랑자의 안식처'라는 아늑한 여관에 도착했습니다.\\n어떤 직업을 선택하시겠습니까?\",privateStories:{},timestamp:new Date()}],choices:Object.keys(professions).map(key=>`${key}. ${professions[key].name}`),player:{profession:'',currentLocation:'방랑자의 안식처'}});const getDefaultPrivatePlayerState=()=>({stats:{strength:10,intelligence:10,agility:10,charisma:10},inventory:[],initialMotivation:'',reputation:{},activeQuests:[],companions:[],knownClues:[]});function App(){const[gameState,setGameState]=useState(getDefaultGameState());const[privatePlayerState,setPrivatePlayerState]=useState(getDefaultPrivatePlayerState());const[isTextLoading,setIsTextLoading]=useState(false);const[activeUsers,setActiveUsers]=useState([]);const[chatMessages,setChatMessages]=useState([]);const[currentChatMessage,setCurrentChatMessage]=useState('');const[actingPlayer,setActingPlayer]=useState(null);const[isActionInProgress,setIsActionInProgress]=useState(false);const[db,setDb]=useState(null);const[auth,setAuth]=useState(null);const[userId,setUserId]=useState(null);const[isAuthReady,setIsAuthReady]=useState(false);const logEndRef=useRef(null);const chatEndRef=useRef(null);const[nickname,setNickname]=useState(()=>localStorage.getItem('nickname')||'');const[showNicknameModal,setShowNicknameModal]=useState(!localStorage.getItem('nickname'));const[nicknameInput,setNicknameInput]=useState('');const[accordion,setAccordion]=useState({gameLog:true,chat:true,users:true,playerInfo:true});const[showResetModal,setShowResetModal]=useState(false);const[isResetting,setIsResetting]=useState(false);const[llmError,setLlmError]=useState(null);const[llmRetryPrompt,setLlmRetryPrompt]=useState(null);const handleNicknameSubmit=()=>{if(nicknameInput.trim()){const finalNickname=nicknameInput.trim();setNickname(finalNickname);localStorage.setItem('nickname',finalNickname);setShowNicknameModal(false);if(userId&&db){const userDocRef=doc(db,'artifacts',appId,'public','data','activeUsers',userId);setDoc(userDocRef,{nickname:finalNickname},{merge:true});}}};const getDisplayName=uid=>{if(uid===userId)return nickname||`플레이어 ${userId===null||userId===void 0?void 0:userId.substring(0,4)}`;const user=activeUsers.find(u=>u.id===uid);return(user===null||user===void 0?void 0:user.nickname)||`플레이어 ${uid===null||uid===void 0?void 0:uid.substring(0,4)}`;};const resetAllGameData=async()=>{if(!db||!isAuthReady)return;setIsResetting(true);try{const collectionsToDelete=[collection(db,'artifacts',appId,'public','data','chatMessages'),collection(db,'artifacts',appId,'public','data','activeUsers')];for(const colRef of collectionsToDelete){const snapshot=await getDocs(colRef);for(const docSnap of snapshot.docs){await deleteDoc(docSnap.ref);}}const usersColRef=collection(db,'artifacts',appId,'users');const usersSnapshot=await getDocs(usersColRef);for(const userDoc of usersSnapshot.docs){const playerStateColRef=collection(db,'artifacts',appId,'users',userDoc.id,'playerState');const playerStateSnapshot=await getDocs(playerStateColRef);for(const stateDoc of playerStateSnapshot.docs){await deleteDoc(stateDoc.ref);}}const mainScenarioRef=getMainScenarioRef(db,appId);const initialGameState=getDefaultGameState();await setDoc(mainScenarioRef,{...initialGameState,storyLog:initialGameState.log,lastUpdate:serverTimestamp()});const gameStatusRef=doc(db,'artifacts',appId,'public','data','gameStatus','status');await deleteDoc(gameStatusRef);setGameState(initialGameState);setPrivatePlayerState(getDefaultPrivatePlayerState());setChatMessages([]);}catch(e){// Log structure changed, so push a new event object for the error.\nconst errorEvent={actor:{displayName:'시스템'},action:'데이터 초기화 오류',publicStory:'데이터 초기화 중 오류 발생: '+e.message,privateStories:{},timestamp:new Date()};setGameState(prev=>({...prev,log:[...prev.log,errorEvent]}));}finally{setIsResetting(false);setShowResetModal(false);}};useEffect(()=>{try{const app=initializeApp(firebaseConfig);const firestoreDb=getFirestore(app);const firebaseAuth=getAuth(app);setDb(firestoreDb);setAuth(firebaseAuth);const unsubscribeAuth=onAuthStateChanged(firebaseAuth,async user=>{if(user){setUserId(user.uid);setIsAuthReady(true);}else{await(initialAuthToken?signInWithCustomToken(firebaseAuth,initialAuthToken):signInAnonymously(firebaseAuth));}});return()=>unsubscribeAuth();}catch(error){console.error(\"Firebase initialization error:\",error);}},[]);useEffect(()=>{if(!db||!userId||!isAuthReady)return;const privateStateRef=getPrivatePlayerStateRef(db,appId,userId);const unsubscribe=onSnapshot(privateStateRef,docSnap=>{if(docSnap.exists()){setPrivatePlayerState(docSnap.data());}else{setDoc(privateStateRef,getDefaultPrivatePlayerState());}},error=>{console.error(\"Private player state snapshot error:\",error);});return()=>unsubscribe();},[db,userId,isAuthReady]);useEffect(()=>{if(!db||!isAuthReady||!userId||!auth)return;const gameStatusDocRef=doc(db,'artifacts',appId,'public','data','gameStatus','status');const unsubscribeGameStatus=onSnapshot(gameStatusDocRef,docSnap=>{const data=docSnap.data();setIsActionInProgress((data===null||data===void 0?void 0:data.isActionInProgress)||false);setActingPlayer((data===null||data===void 0?void 0:data.actingPlayer)||null);});const chatMessagesColRef=collection(db,'artifacts',appId,'public','data','chatMessages');const unsubscribeChat=onSnapshot(query(chatMessagesColRef),snapshot=>{const messages=snapshot.docs.map(doc=>({id:doc.id,...doc.data()})).sort((a,b)=>{var _a$timestamp,_b$timestamp;return(((_a$timestamp=a.timestamp)===null||_a$timestamp===void 0?void 0:_a$timestamp.toMillis())||0)-(((_b$timestamp=b.timestamp)===null||_b$timestamp===void 0?void 0:_b$timestamp.toMillis())||0);});setChatMessages(messages);});const activeUsersColRef=collection(db,'artifacts',appId,'public','data','activeUsers');const unsubscribeActiveUsers=onSnapshot(query(activeUsersColRef),snapshot=>{const cutoffTime=Date.now()-60*1000;const users=snapshot.docs.map(doc=>({id:doc.id,...doc.data()})).filter(user=>user.lastActive&&user.lastActive.toMillis()>cutoffTime);setActiveUsers(users);});const updateUserPresence=async()=>{if(userId){const userDocRef=doc(db,'artifacts',appId,'public','data','activeUsers',userId);await setDoc(userDocRef,{lastActive:serverTimestamp(),nickname:nickname||`플레이어 ${userId.substring(0,4)}`,profession:gameState.player.profession},{merge:true});}};updateUserPresence();const presenceInterval=setInterval(updateUserPresence,30000);return()=>{unsubscribeGameStatus();unsubscribeChat();unsubscribeActiveUsers();clearInterval(presenceInterval);};},[db,isAuthReady,userId,auth,nickname,gameState.player.profession]);useEffect(()=>{if(accordion.gameLog&&logEndRef.current)logEndRef.current.scrollIntoView({behavior:\"smooth\"});},[gameState.log,accordion.gameLog]);useEffect(()=>{if(accordion.chat&&chatEndRef.current)chatEndRef.current.scrollIntoView({behavior:\"smooth\"});},[chatMessages,accordion.chat]);const systemPrompt=`\n    ### 페르소나 (Persona)\n    당신은 TRPG(Tabletop Role-Playing Game)의 최고 실력자 '게임 마스터(GM)'입니다. 당신의 임무는 단순한 스토리 생성이 아니라, 각 플레이어가 자신의 서사의 주인공이 되면서도, 모두가 하나의 거대한 세계관 속에서 살아 숨 쉬고 있다는 느낌을 받도록 만드는 것입니다. 당신은 유려한 문장가이자, 치밀한 설계자이며, 플레이어들의 행동에 즉각적으로 반응하는 유연한 스토리텔러입니다.\n\n    ### 핵심 철학: 하이브리드 월드 (Hybrid World)\n    이 세계는 '공유된 현실'과 '개인적인 서사'가 공존합니다.\n    1.  **공유된 현실 (Shared Reality):** 세상의 중요한 사건, 장소의 변화, 주요 NPC의 죽음 등은 모든 플레이어가 함께 경험하는 절대적인 현실입니다. 이는 'story'와 'sharedStateUpdates'로 표현됩니다.\n    2.  **개인적인 서사 (Personal Narrative):** 플레이어의 내면의 생각, 남들은 모르는 비밀 지식, 개인적인 퀘스트의 진행 등은 오직 그 플레이어에게만 주어지는 고유한 경험입니다. 이는 'privateStory', 'privateChoices', 'privateStateUpdates'로 표현됩니다.\n\n    ### 스토리텔링 원칙\n    * **보여주되, 말하지 말라 (Show, Don't Tell):** '그는 화가 났다'가 아니라 '그는 주먹을 불끈 쥐었다'라고 묘사하십시오.\n    * **역할 존중:** 플레이어의 직업, 능력치, 아이템, 그리고 특히 **'[개인 정보]'**에 담긴 단서('knownClues')나 퀘스트('activeQuests')는 당신이 스토리를 만들 때 가장 먼저 고려해야 할 재료입니다. 이것이 개인화된 경험의 핵심입니다.\n    * **살아있는 세계:** '[주변 플레이어]' 정보를 활용하여 다른 플레이어들의 존재를 이야기에 자연스럽게 녹여내십시오. 그들의 등장은 단순한 배경이 아니라, 새로운 사건의 계기가 되어야 합니다.\n    * **선택의 무게:** 플레이어의 선택은 반드시 의미 있는 결과를 가져와야 합니다. 사소한 선택이 나비효과를 일으킬 수도 있습니다.\n\n    ### JSON 출력 규칙 (매우 중요)\n    당신은 반드시 아래의 JSON 구조를 완벽하게 따라야 합니다. 설명(comment)은 절대 포함하지 마십시오.\n    {\n      \"story\": \"모든 플레이어가 볼 수 있는 공유된 사건에 대한 3인칭 서사. 이 사건의 결과로 세상이 어떻게 변했는지 객관적으로 묘사합니다.\",\n      \"privateStory\": \"선택을 한 플레이어만 볼 수 있는 2인칭 서사. '당신은...', '...라고 느낀다.' 와 같이 내면의 생각, 감각, 남들이 눈치채지 못한 미세한 발견 등을 묘사합니다.\",\n      \"choices\": [\n        \"다른 플레이어들도 선택할 수 있는 일반적인 행동들.\"\n      ],\n      \"privateChoices\": [\n        \"오직 이 플레이어의 직업, 아이템, 퀘스트, 단서 때문에 가능한 특별한 행동들.\"\n      ],\n      \"sharedStateUpdates\": {\n        \"location\": \"플레이어 그룹의 현재 위치. 변경되었을 경우에만 포함됩니다.\"\n      },\n      \"privateStateUpdates\": {\n        \"inventory\": [\"업데이트된 전체 인벤토리 목록\"],\n        \"stats\": {\"strength\": 12, \"intelligence\": 10, ...},\n        \"activeQuests\": [\"업데이트된 개인 퀘스트 목록\"],\n        \"knownClues\": [\"새롭게 알게 된 단서를 포함한 전체 단서 목록\"],\n        \"companions\": [\"업데이트된 동료 목록\"],\n        \"reputation\": {\"세력명\": \"상태\", ...}\n      }\n    }\n\n    ### 규칙 상세\n    * 'privateChoices' 예시: 플레이어의 'knownClues'에 '가문의 문장'이 있다면, \"가문의 문장을 제단에 맞춰본다.\" 와 같은 선택지를 제공하십시오.\n    * **상태 업데이트:** 'privateStateUpdates'의 모든 필드는 **변경 여부와 관계없이 항상 현재 플레이어의 전체 상태를 포함**하여 보내야 합니다. 예를 들어, 아이템을 하나 얻었다면, 기존 아이템을 포함한 전체 인벤토리 목록을 'inventory'에 담아야 합니다.\n    * 'story'와 'privateStory'는 합쳐서 500자 이내로 간결하게 작성하십시오.\n  `;const callGeminiTextLLM=async promptData=>{setIsTextLoading(true);setLlmRetryPrompt(promptData);const mainApiKey=\"AIzaSyDC11rqjU30OJnLjaBFOaazZV0klM5raU8\";const backupApiKey=\"AIzaSyAhscNjW8GmwKPuKzQ47blCY_bDanR-B84\";const getApiUrl=apiKey=>`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;// 이전 로그에서 publicStory만 추출하여 간결한 히스토리 생성\nconst history=promptData.history.map(event=>event.publicStory).slice(-5);const userPrompt=`\n      [상황 분석 요청]\n      아래 정보를 바탕으로 플레이어의 행동에 대한 결과를 생성해주십시오.\n\n      [공유 컨텍스트]\n      - 현재 위치: ${promptData.sharedInfo.currentLocation}\n      - 이전 주요 사건 로그 (최대 5개): ${JSON.stringify(history)}\n\n      [개인 정보 (현재 플레이어)]\n      - 직업: ${promptData.privateInfo.profession||gameState.player.profession}\n      - 능력치: ${JSON.stringify(promptData.privateInfo.stats)}\n      - 인벤토리: ${JSON.stringify(promptData.privateInfo.inventory)}\n      - 활성 퀘스트: ${JSON.stringify(promptData.privateInfo.activeQuests)}\n      - 알려진 단서: ${JSON.stringify(promptData.privateInfo.knownClues)}\n      - 평판: ${JSON.stringify(promptData.privateInfo.reputation)}\n\n      [플레이어의 행동]\n      - 선택: \"${promptData.playerChoice}\"\n\n      [주변 플레이어]\n      - ${promptData.activeUsers.length>0?JSON.stringify(promptData.activeUsers):\"현재 주변에 다른 플레이어가 없습니다.\"}\n    `;const payload={contents:[{role:\"user\",parts:[{text:systemPrompt}]},{role:\"model\",parts:[{text:\"{}\"}]},{role:\"user\",parts:[{text:userPrompt}]}]};const tryGeminiCall=async apiKey=>fetch(getApiUrl(apiKey),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});try{var _result$candidates,_result$candidates$,_result$candidates$$c,_result$candidates$$c2,_result$candidates$$c3;let response=await tryGeminiCall(mainApiKey);if(!response.ok){response=await tryGeminiCall(backupApiKey);}if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const result=await response.json();const llmOutputText=(_result$candidates=result.candidates)===null||_result$candidates===void 0?void 0:(_result$candidates$=_result$candidates[0])===null||_result$candidates$===void 0?void 0:(_result$candidates$$c=_result$candidates$.content)===null||_result$candidates$$c===void 0?void 0:(_result$candidates$$c2=_result$candidates$$c.parts)===null||_result$candidates$$c2===void 0?void 0:(_result$candidates$$c3=_result$candidates$$c2[0])===null||_result$candidates$$c3===void 0?void 0:_result$candidates$$c3.text;const jsonMatch=llmOutputText===null||llmOutputText===void 0?void 0:llmOutputText.match(/\\{[\\s\\S]*\\}/);if(jsonMatch)return JSON.parse(jsonMatch[0]);throw new Error(\"Valid JSON object not found in LLM response.\");}catch(error){console.error(\"LLM API call error:\",error);setLlmError(error.message||'LLM 호출 실패');return null;}finally{setIsTextLoading(false);}};const sendChatMessage=async()=>{if(!db||!userId||!isAuthReady||!currentChatMessage.trim())return;try{const chatCollectionRef=collection(db,'artifacts',appId,'public','data','chatMessages');await addDoc(chatCollectionRef,{userId,displayName:getDisplayName(userId),message:currentChatMessage,timestamp:serverTimestamp()});setCurrentChatMessage('');}catch(error){console.error(\"Error sending chat message:\",error);}};useEffect(()=>{if(!db||!appId||!isAuthReady)return;const ref=getMainScenarioRef(db,appId);const unsubscribe=onSnapshot(ref,async snap=>{if(snap.exists()){const data=snap.data();setGameState(prev=>{var _data$player;return{...prev,log:data.storyLog||prev.log,// 이제 storyLog는 객체 배열\nchoices:data.choices||[],phase:data.phase||prev.phase,player:{...prev.player,currentLocation:((_data$player=data.player)===null||_data$player===void 0?void 0:_data$player.currentLocation)||prev.player.currentLocation}};});}else{const def=getDefaultGameState();try{await setDoc(ref,{...def,storyLog:def.log,lastUpdate:serverTimestamp()},{merge:true});setGameState(def);}catch(e){console.error(\"Failed to create initial scenario:\",e);}}},error=>{console.error(\"Main scenario snapshot error:\",error);setLlmError(\"시나리오를 불러오는 중 오류가 발생했습니다. 페이지를 새로고침 해보세요.\");});return()=>unsubscribe();},[db,appId,isAuthReady]);// ★★★★★ [수정됨] 이벤트 중심 로직으로 변경된 함수 ★★★★★\nconst updateGameStateFromLLM=async(llmResponse,playerChoice)=>{if(!db||!appId||!userId)return;const mainScenarioRef=getMainScenarioRef(db,appId);const newChoices=[...(llmResponse.choices||[]),...(llmResponse.privateChoices||[])];// 1. 새로운 이벤트 객체 생성\nconst newEvent={actor:{id:userId,displayName:getDisplayName(userId)},action:playerChoice,// 사용자가 선택한 행동\npublicStory:llmResponse.story||\"특별한 일은 일어나지 않았다.\",privateStories:{[userId]:llmResponse.privateStory||null},timestamp:serverTimestamp()};try{await runTransaction(db,async transaction=>{var _llmResponse$sharedSt;const scenarioDoc=await transaction.get(mainScenarioRef);if(!scenarioDoc.exists())throw\"시나리오 문서가 존재하지 않습니다.\";const currentData=scenarioDoc.data();// 2. 기존 로그에 새 이벤트 객체 추가\nconst newStoryLog=[...(currentData.storyLog||[]),newEvent];transaction.update(mainScenarioRef,{storyLog:newStoryLog,choices:newChoices,phase:'playing','player.currentLocation':((_llmResponse$sharedSt=llmResponse.sharedStateUpdates)===null||_llmResponse$sharedSt===void 0?void 0:_llmResponse$sharedSt.location)||currentData.player.currentLocation,lastUpdate:serverTimestamp()});});// 3. 개인 상태 업데이트\nconst privateStateRef=getPrivatePlayerStateRef(db,appId,userId);if(llmResponse.privateStateUpdates){// merge:false -> LLM이 항상 전체 상태를 반환하므로 덮어쓰기\nawait setDoc(privateStateRef,llmResponse.privateStateUpdates,{merge:false});}}catch(error){console.error(\"공유 상태 업데이트 실패:\",error);setLlmError(\"시나리오를 업데이트하는 데 실패했습니다.\");}};const handleChoiceClick=async choice=>{if(isTextLoading||isActionInProgress)return;const gameStatusRef=doc(db,'artifacts',appId,'public','data','gameStatus','status');try{await runTransaction(db,async transaction=>{const statusDoc=await transaction.get(gameStatusRef);if(statusDoc.exists()&&statusDoc.data().isActionInProgress){throw new Error(\"다른 플레이어가 행동 중입니다. 잠시 후 다시 시도해주세요.\");}transaction.set(gameStatusRef,{isActionInProgress:true,actingPlayer:{id:userId,displayName:getDisplayName(userId)}},{merge:true});});if(gameState.phase==='characterSelection'){const choiceKey=choice.split('.')[0];const selectedProfession=professions[choiceKey];if(selectedProfession){const initialMotivation=selectedProfession.motivation;const choices=[\"여관을 둘러본다.\",\"다른 모험가에게 말을 건다.\",\"여관 주인에게 정보를 묻는다.\"];const newEvent={actor:{id:userId,displayName:getDisplayName(userId)},action:choice,publicStory:`당신은 '${selectedProfession.name}'입니다. ${initialMotivation}`,privateStories:{},timestamp:serverTimestamp()};const mainScenarioRef=getMainScenarioRef(db,appId);// 이전 로그를 가져와서 새 이벤트를 추가\nconst docSnap=await getDoc(mainScenarioRef);const currentLog=docSnap.exists()?docSnap.data().storyLog:[];await setDoc(mainScenarioRef,{phase:'playing',storyLog:[...currentLog,newEvent],choices:choices,lastUpdate:serverTimestamp()},{merge:true});const privateStateRef=getPrivatePlayerStateRef(db,appId,userId);const newPrivateState=getDefaultPrivatePlayerState();newPrivateState.initialMotivation=initialMotivation;await setDoc(privateStateRef,newPrivateState,{merge:true});setGameState(prev=>({...prev,player:{...prev.player,profession:selectedProfession.name}}));return;// LLM 호출 없이 종료\n}}// 일반적인 행동 처리\nconst promptData={playerChoice:choice,sharedInfo:{currentLocation:gameState.player.currentLocation},privateInfo:{...privatePlayerState,profession:gameState.player.profession},history:gameState.log,// 전체 로그 객체 배열 전달\nactiveUsers:activeUsers.map(u=>({nickname:getDisplayName(u.id),profession:u.profession})).filter(u=>u.id!==userId)};const llmResponse=await callGeminiTextLLM(promptData);if(llmResponse){// ★★★★★ [수정됨] choice를 함께 전달 ★★★★★\nawait updateGameStateFromLLM(llmResponse,choice);setLlmError(null);}else{throw new Error(\"LLM으로부터 유효한 응답을 받지 못했습니다.\");}}catch(error){console.error(\"행동 처리 중 오류:\",error.message);setLlmError(error.message);}finally{await setDoc(gameStatusRef,{isActionInProgress:false,actingPlayer:null},{merge:true});setIsTextLoading(false);}};const toggleAccordion=key=>{setAccordion(prev=>({...prev,[key]:!prev[key]}));};return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen bg-gray-900 text-gray-100 flex flex-col items-center justify-center p-4 font-sans\",children:[showNicknameModal&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md space-y-4\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-bold text-gray-100\",children:\"\\uB2C9\\uB124\\uC784\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"}),/*#__PURE__*/_jsx(\"input\",{className:\"w-full p-3 rounded-md bg-gray-700 border border-gray-600 text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg\",placeholder:\"\\uB2C9\\uB124\\uC784\",value:nicknameInput,onChange:e=>setNicknameInput(e.target.value),onKeyDown:e=>{if(e.key==='Enter')handleNicknameSubmit();},autoFocus:true}),/*#__PURE__*/_jsx(\"button\",{className:\"w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-md transition duration-300 disabled:opacity-50\",onClick:handleNicknameSubmit,disabled:!nicknameInput.trim(),children:\"\\uC2DC\\uC791\\uD558\\uAE30\"})]})}),showResetModal&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md space-y-4\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-bold text-red-400\",children:\"\\u26A0\\uFE0F \\uBAA8\\uB4E0 \\uB370\\uC774\\uD130\\uB97C \\uCD08\\uAE30\\uD654\\uD560\\uAE4C\\uC694?\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-200\",children:\"\\uC774 \\uC791\\uC5C5\\uC740 \\uB418\\uB3CC\\uB9B4 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uBAA8\\uB4E0 \\uC2DC\\uB098\\uB9AC\\uC624, \\uB85C\\uADF8, \\uC720\\uC800, \\uCC44\\uD305 \\uB370\\uC774\\uD130\\uAC00 \\uC0AD\\uC81C\\uB429\\uB2C8\\uB2E4.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-end gap-3\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"px-4 py-2 bg-gray-600 hover:bg-gray-700 font-bold rounded-md\",onClick:()=>setShowResetModal(false),disabled:isResetting,children:\"\\uCDE8\\uC18C\"}),/*#__PURE__*/_jsx(\"button\",{className:\"px-4 py-2 bg-red-600 hover:bg-red-700 font-bold rounded-md\",onClick:resetAllGameData,disabled:isResetting,children:isResetting?'초기화 중...':'초기화'})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"w-full max-w-5xl bg-gray-800 rounded-lg shadow-xl p-6 md:p-8 flex flex-col lg:flex-row space-y-6 lg:space-y-0 lg:space-x-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col w-full lg:w-2/3 space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-2\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between cursor-pointer select-none\",onClick:()=>toggleAccordion('gameLog'),children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-lg font-bold text-gray-100\",children:\"\\uAC8C\\uC784 \\uB85C\\uADF8\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xl\",children:accordion.gameLog?'▼':'▲'})]}),accordion.gameLog&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-end mb-2\",children:/*#__PURE__*/_jsx(\"button\",{className:\"px-3 py-1 bg-red-600 hover:bg-red-700 text-white text-xs rounded-md\",onClick:()=>setShowResetModal(true),children:\"\\uC804\\uCCB4 \\uB370\\uC774\\uD130 \\uCD08\\uAE30\\uD654\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-grow bg-gray-700 p-4 rounded-md overflow-y-auto h-96 custom-scrollbar text-sm md:text-base leading-relaxed\",style:{maxHeight:'24rem'},children:[gameState.log.map((event,index)=>{var _event$actor;return/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4 p-2 rounded bg-gray-900/50\",children:[((_event$actor=event.actor)===null||_event$actor===void 0?void 0:_event$actor.displayName)&&event.action&&/*#__PURE__*/_jsxs(\"p\",{className:\"text-yellow-300 font-semibold italic text-sm\",children:[event.actor.displayName,\" \\uB2D8\\uC774 \",event.action,\" \\uC120\\uD0DD\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"whitespace-pre-wrap mt-1\",dangerouslySetInnerHTML:{__html:(event.publicStory||'').replace(/\\n/g,'<br />')}}),event.privateStories&&event.privateStories[userId]&&/*#__PURE__*/_jsxs(\"p\",{className:\"whitespace-pre-wrap mt-2 p-2 rounded bg-blue-900/30 border-l-4 border-blue-400 text-blue-200\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-bold\",children:\"[\\uB2F9\\uC2E0\\uB9CC \\uC544\\uB294 \\uC0AC\\uC2E4] \"}),event.privateStories[userId]]})]},index);}),isTextLoading&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center items-center mt-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-300\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ml-3 text-gray-400\",children:\"\\uC774\\uC57C\\uAE30\\uB97C \\uC0DD\\uC131 \\uC911...\"})]}),isActionInProgress&&(!actingPlayer||actingPlayer.id!==userId)&&/*#__PURE__*/_jsx(\"div\",{className:\"text-center text-yellow-400 font-semibold p-2 bg-black bg-opacity-20 rounded-md mt-2\",children:actingPlayer?`${getDisplayName(actingPlayer.id)}님이 선택하고 있습니다...`:\"다른 플레이어가 선택하고 있습니다...\"}),llmError&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-red-400 p-2 bg-red-900 bg-opacity-50 rounded mt-2\",children:[\"\\uC624\\uB958: \",llmError]}),/*#__PURE__*/_jsx(\"div\",{ref:logEndRef})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-col gap-3\",children:gameState.choices.map((choice,index)=>/*#__PURE__*/_jsx(\"button\",{className:\"px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-md shadow-lg transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed\",onClick:()=>handleChoiceClick(choice),disabled:isTextLoading||isActionInProgress,children:choice},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"w-full lg:w-1/3 flex flex-col space-y-6 bg-gray-700 p-4 rounded-lg shadow-inner\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-2\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between cursor-pointer select-none\",onClick:()=>toggleAccordion('playerInfo'),children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-md font-semibold text-gray-200\",children:\"\\uB0B4 \\uC815\\uBCF4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xl\",children:accordion.playerInfo?'▼':'▲'})]}),accordion.playerInfo&&gameState.phase==='playing'&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-600 p-3 rounded-md text-xs md:text-sm text-gray-300 space-y-1 h-48 overflow-y-auto custom-scrollbar\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-blue-300\",children:\"\\uC9C1\\uC5C5:\"}),\" \",gameState.player.profession]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-blue-300\",children:\"\\uC704\\uCE58:\"}),\" \",gameState.player.currentLocation]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-blue-300\",children:\"\\uB2A5\\uB825\\uCE58:\"}),\" \\uD798(\",privatePlayerState.stats.strength,\") \\uC9C0\\uB2A5(\",privatePlayerState.stats.intelligence,\") \\uBBFC\\uCCA9(\",privatePlayerState.stats.agility,\") \\uCE74\\uB9AC\\uC2A4\\uB9C8(\",privatePlayerState.stats.charisma,\")\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-blue-300\",children:\"\\uC778\\uBCA4\\uD1A0\\uB9AC:\"}),\" \",privatePlayerState.inventory.join(', ')||'비어있음']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-blue-300\",children:\"\\uD018\\uC2A4\\uD2B8:\"}),\" \",privatePlayerState.activeQuests.join(', ')||'없음']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-blue-300\",children:\"\\uB2E8\\uC11C:\"}),\" \",privatePlayerState.knownClues.join(', ')||'없음']})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-2\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between cursor-pointer select-none\",onClick:()=>toggleAccordion('users'),children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-md font-semibold text-gray-200\",children:\"\\uD604\\uC7AC \\uD50C\\uB808\\uC774\\uC5B4\\uB4E4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xl\",children:accordion.users?'▼':'▲'})]}),accordion.users&&/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-600 p-3 rounded-md h-48 overflow-y-auto custom-scrollbar\",children:activeUsers.length>0?/*#__PURE__*/_jsx(\"ul\",{className:\"text-sm text-gray-300 space-y-1\",children:activeUsers.map(user=>/*#__PURE__*/_jsxs(\"li\",{className:\"truncate p-1 rounded-md\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-green-300\",children:getDisplayName(user.id)}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-gray-400 text-xs\",children:[\" (\",user.profession||'모험가',\")\"]})]},user.id))}):/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-400\",children:\"\\uD65C\\uB3D9 \\uC911\\uC778 \\uD50C\\uB808\\uC774\\uC5B4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-2\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between cursor-pointer select-none\",onClick:()=>toggleAccordion('chat'),children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-md font-semibold text-gray-200\",children:\"\\uACF5\\uAC1C \\uCC44\\uD305\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xl\",children:accordion.chat?'▼':'▲'})]}),accordion.chat&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-600 p-3 rounded-md flex flex-col h-64\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex-grow overflow-y-auto custom-scrollbar mb-3 text-sm space-y-2\",children:[chatMessages.map(msg=>/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsxs(\"span\",{className:\"font-medium text-yellow-300\",children:[getDisplayName(msg.userId),\":\"]}),\" \",msg.message]})},msg.id)),/*#__PURE__*/_jsx(\"div\",{ref:chatEndRef})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"flex-grow p-2 rounded-l-md bg-gray-700 border border-gray-600\",value:currentChatMessage,onChange:e=>setCurrentChatMessage(e.target.value),onKeyPress:e=>e.key==='Enter'&&sendChatMessage(),disabled:!isAuthReady}),/*#__PURE__*/_jsx(\"button\",{className:\"px-4 py-2 bg-blue-600 hover:bg-blue-700 font-bold rounded-r-md\",onClick:sendChatMessage,disabled:!isAuthReady||!currentChatMessage.trim(),children:\"\\uBCF4\\uB0B4\\uAE30\"})]})]})]})]})]}),/*#__PURE__*/_jsx(\"style\",{children:`\n        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&display=swap');\n        body { font-family: 'Noto Sans KR', sans-serif; }\n        .custom-scrollbar::-webkit-scrollbar { width: 8px; }\n        .custom-scrollbar::-webkit-scrollbar-track { background: #4a5568; border-radius: 10px; }\n        .custom-scrollbar::-webkit-scrollbar-thumb { background: #6b7280; border-radius: 10px; }\n        .custom-scrollbar::-webkit-scrollbar-thumb:hover { background: #9ca3af; }\n        `})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","initializeApp","getAuth","signInAnonymously","signInWithCustomToken","onAuthStateChanged","getFirestore","doc","setDoc","getDoc","collection","query","onSnapshot","serverTimestamp","addDoc","getDocs","deleteDoc","where","runTransaction","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","defaultFirebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseConfig","initialAuthToken","professions","name","motivation","getMainScenarioRef","db","getPrivatePlayerStateRef","userId","getDefaultGameState","phase","log","actor","displayName","action","publicStory","privateStories","timestamp","Date","choices","Object","keys","map","key","player","profession","currentLocation","getDefaultPrivatePlayerState","stats","strength","intelligence","agility","charisma","inventory","initialMotivation","reputation","activeQuests","companions","knownClues","App","gameState","setGameState","privatePlayerState","setPrivatePlayerState","isTextLoading","setIsTextLoading","activeUsers","setActiveUsers","chatMessages","setChatMessages","currentChatMessage","setCurrentChatMessage","actingPlayer","setActingPlayer","isActionInProgress","setIsActionInProgress","setDb","auth","setAuth","setUserId","isAuthReady","setIsAuthReady","logEndRef","chatEndRef","nickname","setNickname","localStorage","getItem","showNicknameModal","setShowNicknameModal","nicknameInput","setNicknameInput","accordion","setAccordion","gameLog","chat","users","playerInfo","showResetModal","setShowResetModal","isResetting","setIsResetting","llmError","setLlmError","llmRetryPrompt","setLlmRetryPrompt","handleNicknameSubmit","trim","finalNickname","setItem","userDocRef","merge","getDisplayName","uid","substring","user","find","u","id","resetAllGameData","collectionsToDelete","colRef","snapshot","docSnap","docs","ref","usersColRef","usersSnapshot","userDoc","playerStateColRef","playerStateSnapshot","stateDoc","mainScenarioRef","initialGameState","storyLog","lastUpdate","gameStatusRef","e","errorEvent","message","prev","app","firestoreDb","firebaseAuth","unsubscribeAuth","error","console","privateStateRef","unsubscribe","exists","data","gameStatusDocRef","unsubscribeGameStatus","chatMessagesColRef","unsubscribeChat","messages","sort","a","b","_a$timestamp","_b$timestamp","toMillis","activeUsersColRef","unsubscribeActiveUsers","cutoffTime","now","filter","lastActive","updateUserPresence","presenceInterval","setInterval","clearInterval","current","scrollIntoView","behavior","systemPrompt","callGeminiTextLLM","promptData","mainApiKey","backupApiKey","getApiUrl","history","event","slice","userPrompt","sharedInfo","JSON","stringify","privateInfo","playerChoice","length","payload","contents","role","parts","text","tryGeminiCall","fetch","method","headers","body","_result$candidates","_result$candidates$","_result$candidates$$c","_result$candidates$$c2","_result$candidates$$c3","response","ok","Error","status","result","json","llmOutputText","candidates","content","jsonMatch","match","parse","sendChatMessage","chatCollectionRef","snap","_data$player","def","updateGameStateFromLLM","llmResponse","newChoices","privateChoices","newEvent","story","privateStory","transaction","_llmResponse$sharedSt","scenarioDoc","get","currentData","newStoryLog","update","sharedStateUpdates","location","privateStateUpdates","handleChoiceClick","choice","statusDoc","set","choiceKey","split","selectedProfession","currentLog","newPrivateState","toggleAccordion","className","children","placeholder","value","onChange","target","onKeyDown","autoFocus","onClick","disabled","style","maxHeight","index","_event$actor","dangerouslySetInnerHTML","__html","replace","join","msg","type","onKeyPress"],"sources":["C:/workspaces/gemini/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport {\r\n  getAuth,\r\n  signInAnonymously,\r\n  signInWithCustomToken,\r\n  onAuthStateChanged\r\n} from 'firebase/auth';\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  setDoc,\r\n  getDoc,\r\n  collection,\r\n  query,\r\n  onSnapshot,\r\n  serverTimestamp,\r\n  addDoc,\r\n  getDocs,\r\n  deleteDoc,\r\n  where,\r\n  runTransaction\r\n} from 'firebase/firestore';\r\n\r\n// ====================================================================\r\n// Firebase configuration information - 수정 금지\r\nconst defaultFirebaseConfig = {\r\n  apiKey: \"AIzaSyBNJtmpRWzjobrY556bnHkwbZmpFJqgPX8\",\r\n  authDomain: \"text-adventure-game-cb731.firebaseapp.com\",\r\n  projectId: \"text-adventure-game-cb731\",\r\n  storageBucket: \"text-adventure-game-cb731.appspot.com\",\r\n  messagingSenderId: \"1092941614820\",\r\n  appId: \"1:1092941614820:web:5545f36014b73c268026f1\",\r\n  measurementId: \"G-FNGF42T1FP\"\r\n};\r\n\r\n// 수정금지\r\nconst firebaseConfig = defaultFirebaseConfig;\r\nconst appId = firebaseConfig.projectId;\r\nconst initialAuthToken = null;\r\n// ====================================================================\r\n\r\nconst professions = {\r\n  '1': { name: '몰락한 귀족/기사', motivation: '가문의 몰락 원인을 조사하고, 잃어버린 가문의 보물을 찾아야 합니다.' },\r\n  '2': { name: '평범한 마을 사람/농부', motivation: '갑자기 마을에 나타난 괴생명체로부터 마을을 지켜야 합니다.' },\r\n  '3': { name: '젊은 마법사/견습생', motivation: '스승님의 실종에 대한 단서를 찾아야 합니다.' },\r\n  '4': { name: '용병/모험가', motivation: '의뢰받은 임무를 수행하던 중 예상치 못한 사건에 휘말렸습니다.' },\r\n  '5': { name: '도적/암살자', motivation: '길드에서 내려온 첫 번째 임무를 완수하고, 그 과정에서 수상한 음모를 감지해야 합니다.' },\r\n  '6': { name: '왕족/공주/왕자', motivation: '왕실 내의 불화와 암투 속에서 자신의 입지를 다져야 합니다.' },\r\n};\r\n\r\n// Firestore 경로 유틸\r\nconst getMainScenarioRef = (db, appId) => doc(db, 'artifacts', appId, 'public', 'data', 'mainScenario', 'main');\r\nconst getPrivatePlayerStateRef = (db, appId, userId) => doc(db, 'artifacts', appId, 'users', userId, 'playerState', 'state');\r\n\r\n// 상태 초기화 유틸\r\nconst getDefaultGameState = () => ({\r\n  phase: 'characterSelection',\r\n  log: [ // 로그 구조를 이벤트 객체로 변경\r\n    {\r\n      actor: { displayName: '게임 마스터' },\r\n      action: '게임 시작',\r\n      publicStory: \"환영합니다! 당신은 중세 유럽풍 판타지 왕국의 모험가가 될 것입니다. 당신은 지금 '방랑자의 안식처'라는 아늑한 여관에 도착했습니다.\\n어떤 직업을 선택하시겠습니까?\",\r\n      privateStories: {},\r\n      timestamp: new Date()\r\n    }\r\n  ],\r\n  choices: Object.keys(professions).map(key => `${key}. ${professions[key].name}`),\r\n  player: {\r\n    profession: '',\r\n    currentLocation: '방랑자의 안식처',\r\n  },\r\n});\r\n\r\nconst getDefaultPrivatePlayerState = () => ({\r\n    stats: { strength: 10, intelligence: 10, agility: 10, charisma: 10 },\r\n    inventory: [],\r\n    initialMotivation: '',\r\n    reputation: {},\r\n    activeQuests: [],\r\n    companions: [],\r\n    knownClues: [],\r\n});\r\n\r\n\r\nfunction App() {\r\n  const [gameState, setGameState] = useState(getDefaultGameState());\r\n  const [privatePlayerState, setPrivatePlayerState] = useState(getDefaultPrivatePlayerState());\r\n  const [isTextLoading, setIsTextLoading] = useState(false);\r\n  const [activeUsers, setActiveUsers] = useState([]);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [currentChatMessage, setCurrentChatMessage] = useState('');\r\n  const [actingPlayer, setActingPlayer] = useState(null);\r\n  const [isActionInProgress, setIsActionInProgress] = useState(false);\r\n  const [db, setDb] = useState(null);\r\n  const [auth, setAuth] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n  const logEndRef = useRef(null);\r\n  const chatEndRef = useRef(null);\r\n  const [nickname, setNickname] = useState(() => localStorage.getItem('nickname') || '');\r\n  const [showNicknameModal, setShowNicknameModal] = useState(!localStorage.getItem('nickname'));\r\n  const [nicknameInput, setNicknameInput] = useState('');\r\n  const [accordion, setAccordion] = useState({ gameLog: true, chat: true, users: true, playerInfo: true });\r\n  const [showResetModal, setShowResetModal] = useState(false);\r\n  const [isResetting, setIsResetting] = useState(false);\r\n  const [llmError, setLlmError] = useState(null);\r\n  const [llmRetryPrompt, setLlmRetryPrompt] = useState(null);\r\n\r\n  const handleNicknameSubmit = () => {\r\n    if (nicknameInput.trim()) {\r\n      const finalNickname = nicknameInput.trim();\r\n      setNickname(finalNickname);\r\n      localStorage.setItem('nickname', finalNickname);\r\n      setShowNicknameModal(false);\r\n      if (userId && db) {\r\n          const userDocRef = doc(db, 'artifacts', appId, 'public', 'data', 'activeUsers', userId);\r\n          setDoc(userDocRef, { nickname: finalNickname }, { merge: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  const getDisplayName = (uid) => {\r\n    if (uid === userId) return nickname || `플레이어 ${userId?.substring(0, 4)}`;\r\n    const user = activeUsers.find(u => u.id === uid);\r\n    return user?.nickname || `플레이어 ${uid?.substring(0, 4)}`;\r\n  };\r\n\r\n  const resetAllGameData = async () => {\r\n    if (!db || !isAuthReady) return;\r\n    setIsResetting(true);\r\n    try {\r\n        const collectionsToDelete = [\r\n            collection(db, 'artifacts', appId, 'public', 'data', 'chatMessages'),\r\n            collection(db, 'artifacts', appId, 'public', 'data', 'activeUsers'),\r\n        ];\r\n\r\n        for (const colRef of collectionsToDelete) {\r\n            const snapshot = await getDocs(colRef);\r\n            for (const docSnap of snapshot.docs) {\r\n                await deleteDoc(docSnap.ref);\r\n            }\r\n        }\r\n\r\n        const usersColRef = collection(db, 'artifacts', appId, 'users');\r\n        const usersSnapshot = await getDocs(usersColRef);\r\n        for (const userDoc of usersSnapshot.docs) {\r\n            const playerStateColRef = collection(db, 'artifacts', appId, 'users', userDoc.id, 'playerState');\r\n            const playerStateSnapshot = await getDocs(playerStateColRef);\r\n            for (const stateDoc of playerStateSnapshot.docs) {\r\n                await deleteDoc(stateDoc.ref);\r\n            }\r\n        }\r\n\r\n        const mainScenarioRef = getMainScenarioRef(db, appId);\r\n        const initialGameState = getDefaultGameState();\r\n        await setDoc(mainScenarioRef, { ...initialGameState, storyLog: initialGameState.log, lastUpdate: serverTimestamp() });\r\n        \r\n        const gameStatusRef = doc(db, 'artifacts', appId, 'public', 'data', 'gameStatus', 'status');\r\n        await deleteDoc(gameStatusRef);\r\n\r\n        setGameState(initialGameState);\r\n        setPrivatePlayerState(getDefaultPrivatePlayerState());\r\n        setChatMessages([]);\r\n\r\n    } catch (e) {\r\n        // Log structure changed, so push a new event object for the error.\r\n        const errorEvent = {\r\n            actor: { displayName: '시스템' },\r\n            action: '데이터 초기화 오류',\r\n            publicStory: '데이터 초기화 중 오류 발생: ' + e.message,\r\n            privateStories: {},\r\n            timestamp: new Date()\r\n        };\r\n        setGameState(prev => ({ ...prev, log: [...prev.log, errorEvent] }));\r\n    } finally {\r\n      setIsResetting(false);\r\n      setShowResetModal(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const app = initializeApp(firebaseConfig);\r\n      const firestoreDb = getFirestore(app);\r\n      const firebaseAuth = getAuth(app);\r\n      setDb(firestoreDb);\r\n      setAuth(firebaseAuth);\r\n      const unsubscribeAuth = onAuthStateChanged(firebaseAuth, async (user) => {\r\n        if (user) {\r\n          setUserId(user.uid);\r\n          setIsAuthReady(true);\r\n        } else {\r\n            await (initialAuthToken ? signInWithCustomToken(firebaseAuth, initialAuthToken) : signInAnonymously(firebaseAuth));\r\n        }\r\n      });\r\n      return () => unsubscribeAuth();\r\n    } catch (error) {\r\n      console.error(\"Firebase initialization error:\", error);\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    if (!db || !userId || !isAuthReady) return;\r\n\r\n    const privateStateRef = getPrivatePlayerStateRef(db, appId, userId);\r\n    const unsubscribe = onSnapshot(privateStateRef, (docSnap) => {\r\n        if (docSnap.exists()) {\r\n            setPrivatePlayerState(docSnap.data());\r\n        } else {\r\n            setDoc(privateStateRef, getDefaultPrivatePlayerState());\r\n        }\r\n    }, (error) => {\r\n        console.error(\"Private player state snapshot error:\", error);\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [db, userId, isAuthReady]);\r\n\r\n  useEffect(() => {\r\n    if (!db || !isAuthReady || !userId || !auth) return;\r\n\r\n    const gameStatusDocRef = doc(db, 'artifacts', appId, 'public', 'data', 'gameStatus', 'status');\r\n    const unsubscribeGameStatus = onSnapshot(gameStatusDocRef, (docSnap) => {\r\n      const data = docSnap.data();\r\n      setIsActionInProgress(data?.isActionInProgress || false);\r\n      setActingPlayer(data?.actingPlayer || null);\r\n    });\r\n\r\n    const chatMessagesColRef = collection(db, 'artifacts', appId, 'public', 'data', 'chatMessages');\r\n    const unsubscribeChat = onSnapshot(query(chatMessagesColRef), (snapshot) => {\r\n        const messages = snapshot.docs\r\n            .map(doc => ({ id: doc.id, ...doc.data() }))\r\n            .sort((a, b) => (a.timestamp?.toMillis() || 0) - (b.timestamp?.toMillis() || 0));\r\n        setChatMessages(messages);\r\n    });\r\n\r\n    const activeUsersColRef = collection(db, 'artifacts', appId, 'public', 'data', 'activeUsers');\r\n    const unsubscribeActiveUsers = onSnapshot(query(activeUsersColRef), (snapshot) => {\r\n      const cutoffTime = Date.now() - 60 * 1000;\r\n      const users = snapshot.docs\r\n        .map(doc => ({ id: doc.id, ...doc.data() }))\r\n        .filter(user => user.lastActive && user.lastActive.toMillis() > cutoffTime);\r\n      setActiveUsers(users);\r\n    });\r\n    \r\n    const updateUserPresence = async () => {\r\n      if (userId) {\r\n        const userDocRef = doc(db, 'artifacts', appId, 'public', 'data', 'activeUsers', userId);\r\n        await setDoc(userDocRef, {\r\n          lastActive: serverTimestamp(),\r\n          nickname: nickname || `플레이어 ${userId.substring(0, 4)}`,\r\n          profession: gameState.player.profession,\r\n        }, { merge: true });\r\n      }\r\n    };\r\n    updateUserPresence();\r\n    const presenceInterval = setInterval(updateUserPresence, 30000);\r\n\r\n    return () => {\r\n      unsubscribeGameStatus();\r\n      unsubscribeChat();\r\n      unsubscribeActiveUsers();\r\n      clearInterval(presenceInterval);\r\n    };\r\n  }, [db, isAuthReady, userId, auth, nickname, gameState.player.profession]);\r\n\r\n  useEffect(() => {\r\n    if (accordion.gameLog && logEndRef.current) logEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [gameState.log, accordion.gameLog]);\r\n\r\n  useEffect(() => {\r\n    if (accordion.chat && chatEndRef.current) chatEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [chatMessages, accordion.chat]);\r\n  \r\n  const systemPrompt = `\r\n    ### 페르소나 (Persona)\r\n    당신은 TRPG(Tabletop Role-Playing Game)의 최고 실력자 '게임 마스터(GM)'입니다. 당신의 임무는 단순한 스토리 생성이 아니라, 각 플레이어가 자신의 서사의 주인공이 되면서도, 모두가 하나의 거대한 세계관 속에서 살아 숨 쉬고 있다는 느낌을 받도록 만드는 것입니다. 당신은 유려한 문장가이자, 치밀한 설계자이며, 플레이어들의 행동에 즉각적으로 반응하는 유연한 스토리텔러입니다.\r\n\r\n    ### 핵심 철학: 하이브리드 월드 (Hybrid World)\r\n    이 세계는 '공유된 현실'과 '개인적인 서사'가 공존합니다.\r\n    1.  **공유된 현실 (Shared Reality):** 세상의 중요한 사건, 장소의 변화, 주요 NPC의 죽음 등은 모든 플레이어가 함께 경험하는 절대적인 현실입니다. 이는 'story'와 'sharedStateUpdates'로 표현됩니다.\r\n    2.  **개인적인 서사 (Personal Narrative):** 플레이어의 내면의 생각, 남들은 모르는 비밀 지식, 개인적인 퀘스트의 진행 등은 오직 그 플레이어에게만 주어지는 고유한 경험입니다. 이는 'privateStory', 'privateChoices', 'privateStateUpdates'로 표현됩니다.\r\n\r\n    ### 스토리텔링 원칙\r\n    * **보여주되, 말하지 말라 (Show, Don't Tell):** '그는 화가 났다'가 아니라 '그는 주먹을 불끈 쥐었다'라고 묘사하십시오.\r\n    * **역할 존중:** 플레이어의 직업, 능력치, 아이템, 그리고 특히 **'[개인 정보]'**에 담긴 단서('knownClues')나 퀘스트('activeQuests')는 당신이 스토리를 만들 때 가장 먼저 고려해야 할 재료입니다. 이것이 개인화된 경험의 핵심입니다.\r\n    * **살아있는 세계:** '[주변 플레이어]' 정보를 활용하여 다른 플레이어들의 존재를 이야기에 자연스럽게 녹여내십시오. 그들의 등장은 단순한 배경이 아니라, 새로운 사건의 계기가 되어야 합니다.\r\n    * **선택의 무게:** 플레이어의 선택은 반드시 의미 있는 결과를 가져와야 합니다. 사소한 선택이 나비효과를 일으킬 수도 있습니다.\r\n\r\n    ### JSON 출력 규칙 (매우 중요)\r\n    당신은 반드시 아래의 JSON 구조를 완벽하게 따라야 합니다. 설명(comment)은 절대 포함하지 마십시오.\r\n    {\r\n      \"story\": \"모든 플레이어가 볼 수 있는 공유된 사건에 대한 3인칭 서사. 이 사건의 결과로 세상이 어떻게 변했는지 객관적으로 묘사합니다.\",\r\n      \"privateStory\": \"선택을 한 플레이어만 볼 수 있는 2인칭 서사. '당신은...', '...라고 느낀다.' 와 같이 내면의 생각, 감각, 남들이 눈치채지 못한 미세한 발견 등을 묘사합니다.\",\r\n      \"choices\": [\r\n        \"다른 플레이어들도 선택할 수 있는 일반적인 행동들.\"\r\n      ],\r\n      \"privateChoices\": [\r\n        \"오직 이 플레이어의 직업, 아이템, 퀘스트, 단서 때문에 가능한 특별한 행동들.\"\r\n      ],\r\n      \"sharedStateUpdates\": {\r\n        \"location\": \"플레이어 그룹의 현재 위치. 변경되었을 경우에만 포함됩니다.\"\r\n      },\r\n      \"privateStateUpdates\": {\r\n        \"inventory\": [\"업데이트된 전체 인벤토리 목록\"],\r\n        \"stats\": {\"strength\": 12, \"intelligence\": 10, ...},\r\n        \"activeQuests\": [\"업데이트된 개인 퀘스트 목록\"],\r\n        \"knownClues\": [\"새롭게 알게 된 단서를 포함한 전체 단서 목록\"],\r\n        \"companions\": [\"업데이트된 동료 목록\"],\r\n        \"reputation\": {\"세력명\": \"상태\", ...}\r\n      }\r\n    }\r\n\r\n    ### 규칙 상세\r\n    * 'privateChoices' 예시: 플레이어의 'knownClues'에 '가문의 문장'이 있다면, \"가문의 문장을 제단에 맞춰본다.\" 와 같은 선택지를 제공하십시오.\r\n    * **상태 업데이트:** 'privateStateUpdates'의 모든 필드는 **변경 여부와 관계없이 항상 현재 플레이어의 전체 상태를 포함**하여 보내야 합니다. 예를 들어, 아이템을 하나 얻었다면, 기존 아이템을 포함한 전체 인벤토리 목록을 'inventory'에 담아야 합니다.\r\n    * 'story'와 'privateStory'는 합쳐서 500자 이내로 간결하게 작성하십시오.\r\n  `;\r\n\r\n  const callGeminiTextLLM = async (promptData) => {\r\n    setIsTextLoading(true);\r\n    setLlmRetryPrompt(promptData);\r\n    const mainApiKey = \"AIzaSyDC11rqjU30OJnLjaBFOaazZV0klM5raU8\";\r\n    const backupApiKey = \"AIzaSyAhscNjW8GmwKPuKzQ47blCY_bDanR-B84\";\r\n    const getApiUrl = (apiKey) => `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n    \r\n    // 이전 로그에서 publicStory만 추출하여 간결한 히스토리 생성\r\n    const history = promptData.history.map(event => event.publicStory).slice(-5);\r\n\r\n    const userPrompt = `\r\n      [상황 분석 요청]\r\n      아래 정보를 바탕으로 플레이어의 행동에 대한 결과를 생성해주십시오.\r\n\r\n      [공유 컨텍스트]\r\n      - 현재 위치: ${promptData.sharedInfo.currentLocation}\r\n      - 이전 주요 사건 로그 (최대 5개): ${JSON.stringify(history)}\r\n\r\n      [개인 정보 (현재 플레이어)]\r\n      - 직업: ${promptData.privateInfo.profession || gameState.player.profession}\r\n      - 능력치: ${JSON.stringify(promptData.privateInfo.stats)}\r\n      - 인벤토리: ${JSON.stringify(promptData.privateInfo.inventory)}\r\n      - 활성 퀘스트: ${JSON.stringify(promptData.privateInfo.activeQuests)}\r\n      - 알려진 단서: ${JSON.stringify(promptData.privateInfo.knownClues)}\r\n      - 평판: ${JSON.stringify(promptData.privateInfo.reputation)}\r\n\r\n      [플레이어의 행동]\r\n      - 선택: \"${promptData.playerChoice}\"\r\n\r\n      [주변 플레이어]\r\n      - ${promptData.activeUsers.length > 0 ? JSON.stringify(promptData.activeUsers) : \"현재 주변에 다른 플레이어가 없습니다.\"}\r\n    `;\r\n\r\n    const payload = { contents: [{ role: \"user\", parts: [{ text: systemPrompt }] }, { role: \"model\", parts: [{ text: \"{}\" }] }, { role: \"user\", parts: [{ text: userPrompt }] }] };\r\n\r\n    const tryGeminiCall = async (apiKey) => fetch(getApiUrl(apiKey), { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });\r\n\r\n    try {\r\n      let response = await tryGeminiCall(mainApiKey);\r\n      if (!response.ok) {\r\n        response = await tryGeminiCall(backupApiKey);\r\n      }\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const result = await response.json();\r\n      const llmOutputText = result.candidates?.[0]?.content?.parts?.[0]?.text;\r\n      const jsonMatch = llmOutputText?.match(/\\{[\\s\\S]*\\}/);\r\n      if (jsonMatch) return JSON.parse(jsonMatch[0]);\r\n      throw new Error(\"Valid JSON object not found in LLM response.\");\r\n    } catch (error) {\r\n      console.error(\"LLM API call error:\", error);\r\n      setLlmError(error.message || 'LLM 호출 실패');\r\n      return null;\r\n    } finally {\r\n      setIsTextLoading(false);\r\n    }\r\n  };\r\n\r\n  const sendChatMessage = async () => {\r\n    if (!db || !userId || !isAuthReady || !currentChatMessage.trim()) return;\r\n    try {\r\n      const chatCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'chatMessages');\r\n      await addDoc(chatCollectionRef, { userId, displayName: getDisplayName(userId), message: currentChatMessage, timestamp: serverTimestamp() });\r\n      setCurrentChatMessage('');\r\n    } catch (error) {\r\n      console.error(\"Error sending chat message:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!db || !appId || !isAuthReady) return;\r\n    const ref = getMainScenarioRef(db, appId);\r\n    const unsubscribe = onSnapshot(ref, async (snap) => {\r\n      if (snap.exists()) {\r\n        const data = snap.data();\r\n        setGameState(prev => ({\r\n          ...prev,\r\n          log: data.storyLog || prev.log, // 이제 storyLog는 객체 배열\r\n          choices: data.choices || [],\r\n          phase: data.phase || prev.phase,\r\n          player: { ...prev.player, currentLocation: data.player?.currentLocation || prev.player.currentLocation }\r\n        }));\r\n      } else {\r\n        const def = getDefaultGameState();\r\n        try {\r\n            await setDoc(ref, { ...def, storyLog: def.log, lastUpdate: serverTimestamp() }, { merge: true });\r\n            setGameState(def);\r\n        } catch (e) {\r\n            console.error(\"Failed to create initial scenario:\", e);\r\n        }\r\n      }\r\n    }, (error) => {\r\n      console.error(\"Main scenario snapshot error:\", error);\r\n      setLlmError(\"시나리오를 불러오는 중 오류가 발생했습니다. 페이지를 새로고침 해보세요.\");\r\n    });\r\n    return () => unsubscribe();\r\n  }, [db, appId, isAuthReady]);\r\n\r\n  // ★★★★★ [수정됨] 이벤트 중심 로직으로 변경된 함수 ★★★★★\r\n  const updateGameStateFromLLM = async (llmResponse, playerChoice) => {\r\n    if (!db || !appId || !userId) return;\r\n\r\n    const mainScenarioRef = getMainScenarioRef(db, appId);\r\n    const newChoices = [...(llmResponse.choices || []), ...(llmResponse.privateChoices || [])];\r\n\r\n    // 1. 새로운 이벤트 객체 생성\r\n    const newEvent = {\r\n        actor: { id: userId, displayName: getDisplayName(userId) },\r\n        action: playerChoice, // 사용자가 선택한 행동\r\n        publicStory: llmResponse.story || \"특별한 일은 일어나지 않았다.\",\r\n        privateStories: {\r\n            [userId]: llmResponse.privateStory || null\r\n        },\r\n        timestamp: serverTimestamp()\r\n    };\r\n\r\n    try {\r\n        await runTransaction(db, async (transaction) => {\r\n            const scenarioDoc = await transaction.get(mainScenarioRef);\r\n            if (!scenarioDoc.exists()) throw \"시나리오 문서가 존재하지 않습니다.\";\r\n\r\n            const currentData = scenarioDoc.data();\r\n            // 2. 기존 로그에 새 이벤트 객체 추가\r\n            const newStoryLog = [...(currentData.storyLog || []), newEvent];\r\n\r\n            transaction.update(mainScenarioRef, {\r\n                storyLog: newStoryLog,\r\n                choices: newChoices,\r\n                phase: 'playing',\r\n                'player.currentLocation': llmResponse.sharedStateUpdates?.location || currentData.player.currentLocation,\r\n                lastUpdate: serverTimestamp()\r\n            });\r\n        });\r\n\r\n        // 3. 개인 상태 업데이트\r\n        const privateStateRef = getPrivatePlayerStateRef(db, appId, userId);\r\n        if (llmResponse.privateStateUpdates) {\r\n            // merge:false -> LLM이 항상 전체 상태를 반환하므로 덮어쓰기\r\n            await setDoc(privateStateRef, llmResponse.privateStateUpdates, { merge: false });\r\n        }\r\n    } catch (error) {\r\n        console.error(\"공유 상태 업데이트 실패:\", error);\r\n        setLlmError(\"시나리오를 업데이트하는 데 실패했습니다.\");\r\n    }\r\n  };\r\n\r\n  const handleChoiceClick = async (choice) => {\r\n    if (isTextLoading || isActionInProgress) return;\r\n\r\n    const gameStatusRef = doc(db, 'artifacts', appId, 'public', 'data', 'gameStatus', 'status');\r\n\r\n    try {\r\n      await runTransaction(db, async (transaction) => {\r\n        const statusDoc = await transaction.get(gameStatusRef);\r\n        if (statusDoc.exists() && statusDoc.data().isActionInProgress) {\r\n          throw new Error(\"다른 플레이어가 행동 중입니다. 잠시 후 다시 시도해주세요.\");\r\n        }\r\n        transaction.set(gameStatusRef, {\r\n          isActionInProgress: true,\r\n          actingPlayer: { id: userId, displayName: getDisplayName(userId) }\r\n        }, { merge: true });\r\n      });\r\n\r\n      if (gameState.phase === 'characterSelection') {\r\n        const choiceKey = choice.split('.')[0];\r\n        const selectedProfession = professions[choiceKey];\r\n        if (selectedProfession) {\r\n          const initialMotivation = selectedProfession.motivation;\r\n          const choices = [\"여관을 둘러본다.\", \"다른 모험가에게 말을 건다.\", \"여관 주인에게 정보를 묻는다.\"];\r\n          \r\n          const newEvent = {\r\n            actor: { id: userId, displayName: getDisplayName(userId) },\r\n            action: choice,\r\n            publicStory: `당신은 '${selectedProfession.name}'입니다. ${initialMotivation}`,\r\n            privateStories: {},\r\n            timestamp: serverTimestamp()\r\n          };\r\n          \r\n          const mainScenarioRef = getMainScenarioRef(db, appId);\r\n          // 이전 로그를 가져와서 새 이벤트를 추가\r\n          const docSnap = await getDoc(mainScenarioRef);\r\n          const currentLog = docSnap.exists() ? docSnap.data().storyLog : [];\r\n          \r\n          await setDoc(mainScenarioRef, {\r\n              phase: 'playing',\r\n              storyLog: [...currentLog, newEvent],\r\n              choices: choices,\r\n              lastUpdate: serverTimestamp(),\r\n          }, { merge: true });\r\n\r\n          const privateStateRef = getPrivatePlayerStateRef(db, appId, userId);\r\n          const newPrivateState = getDefaultPrivatePlayerState();\r\n          newPrivateState.initialMotivation = initialMotivation;\r\n          await setDoc(privateStateRef, newPrivateState, { merge: true });\r\n          \r\n          setGameState(prev => ({ ...prev, player: {...prev.player, profession: selectedProfession.name }}));\r\n          return; // LLM 호출 없이 종료\r\n        }\r\n      }\r\n\r\n      // 일반적인 행동 처리\r\n      const promptData = {\r\n        playerChoice: choice,\r\n        sharedInfo: { currentLocation: gameState.player.currentLocation },\r\n        privateInfo: { ...privatePlayerState, profession: gameState.player.profession },\r\n        history: gameState.log, // 전체 로그 객체 배열 전달\r\n        activeUsers: activeUsers.map(u => ({ nickname: getDisplayName(u.id), profession: u.profession })).filter(u => u.id !== userId),\r\n      };\r\n      \r\n      const llmResponse = await callGeminiTextLLM(promptData);\r\n      if (llmResponse) {\r\n        // ★★★★★ [수정됨] choice를 함께 전달 ★★★★★\r\n        await updateGameStateFromLLM(llmResponse, choice);\r\n        setLlmError(null);\r\n      } else {\r\n        throw new Error(\"LLM으로부터 유효한 응답을 받지 못했습니다.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"행동 처리 중 오류:\", error.message);\r\n      setLlmError(error.message);\r\n    } finally {\r\n      await setDoc(gameStatusRef, { isActionInProgress: false, actingPlayer: null }, { merge: true });\r\n      setIsTextLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleAccordion = (key) => {\r\n    setAccordion(prev => ({ ...prev, [key]: !prev[key] }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 text-gray-100 flex flex-col items-center justify-center p-4 font-sans\">\r\n      {showNicknameModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md space-y-4\">\r\n            <h3 className=\"text-xl font-bold text-gray-100\">닉네임을 입력하세요</h3>\r\n            <input\r\n              className=\"w-full p-3 rounded-md bg-gray-700 border border-gray-600 text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg\"\r\n              placeholder=\"닉네임\"\r\n              value={nicknameInput}\r\n              onChange={e => setNicknameInput(e.target.value)}\r\n              onKeyDown={e => { if (e.key === 'Enter') handleNicknameSubmit(); }}\r\n              autoFocus\r\n            />\r\n            <button\r\n              className=\"w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-md transition duration-300 disabled:opacity-50\"\r\n              onClick={handleNicknameSubmit}\r\n              disabled={!nicknameInput.trim()}\r\n            >\r\n              시작하기\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showResetModal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md space-y-4\">\r\n            <h3 className=\"text-xl font-bold text-red-400\">⚠️ 모든 데이터를 초기화할까요?</h3>\r\n            <p className=\"text-gray-200\">이 작업은 되돌릴 수 없습니다. 모든 시나리오, 로그, 유저, 채팅 데이터가 삭제됩니다.</p>\r\n            <div className=\"flex justify-end gap-3\">\r\n              <button className=\"px-4 py-2 bg-gray-600 hover:bg-gray-700 font-bold rounded-md\" onClick={() => setShowResetModal(false)} disabled={isResetting}>취소</button>\r\n              <button className=\"px-4 py-2 bg-red-600 hover:bg-red-700 font-bold rounded-md\" onClick={resetAllGameData} disabled={isResetting}>{isResetting ? '초기화 중...' : '초기화'}</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"w-full max-w-5xl bg-gray-800 rounded-lg shadow-xl p-6 md:p-8 flex flex-col lg:flex-row space-y-6 lg:space-y-0 lg:space-x-6\">\r\n        <div className=\"flex flex-col w-full lg:w-2/3 space-y-6\">\r\n          <div className=\"mb-2\">\r\n            <div className=\"flex items-center justify-between cursor-pointer select-none\" onClick={() => toggleAccordion('gameLog')}>\r\n              <h2 className=\"text-lg font-bold text-gray-100\">게임 로그</h2>\r\n              <div className=\"text-xl\">{accordion.gameLog ? '▼' : '▲'}</div>\r\n            </div>\r\n            {accordion.gameLog && (\r\n              <>\r\n                <div className=\"flex justify-end mb-2\">\r\n                  <button className=\"px-3 py-1 bg-red-600 hover:bg-red-700 text-white text-xs rounded-md\" onClick={() => setShowResetModal(true)}>전체 데이터 초기화</button>\r\n                </div>\r\n                {/* ★★★★★ [수정됨] 이벤트 객체 렌더링 로직 ★★★★★ */}\r\n                <div className=\"flex-grow bg-gray-700 p-4 rounded-md overflow-y-auto h-96 custom-scrollbar text-sm md:text-base leading-relaxed\" style={{ maxHeight: '24rem' }}>\r\n                  {gameState.log.map((event, index) => (\r\n                    <div key={index} className=\"mb-4 p-2 rounded bg-gray-900/50\">\r\n                      {event.actor?.displayName && event.action && (\r\n                         <p className=\"text-yellow-300 font-semibold italic text-sm\">\r\n                            {event.actor.displayName} 님이 {event.action} 선택\r\n                         </p>\r\n                      )}\r\n                      <p className=\"whitespace-pre-wrap mt-1\" dangerouslySetInnerHTML={{ __html: (event.publicStory || '').replace(/\\n/g, '<br />') }}></p>\r\n                      {event.privateStories && event.privateStories[userId] && (\r\n                        <p className=\"whitespace-pre-wrap mt-2 p-2 rounded bg-blue-900/30 border-l-4 border-blue-400 text-blue-200\">\r\n                          <span className=\"font-bold\">[당신만 아는 사실] </span>\r\n                          {event.privateStories[userId]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                  {isTextLoading && (\r\n                    <div className=\"flex justify-center items-center mt-4\">\r\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-300\"></div>\r\n                      <span className=\"ml-3 text-gray-400\">이야기를 생성 중...</span>\r\n                    </div>\r\n                  )}\r\n                  {isActionInProgress && (!actingPlayer || actingPlayer.id !== userId) && (\r\n                      <div className=\"text-center text-yellow-400 font-semibold p-2 bg-black bg-opacity-20 rounded-md mt-2\">\r\n                          {actingPlayer ? `${getDisplayName(actingPlayer.id)}님이 선택하고 있습니다...` : \"다른 플레이어가 선택하고 있습니다...\"}\r\n                      </div>\r\n                  )}\r\n                  {llmError && <div className=\"text-red-400 p-2 bg-red-900 bg-opacity-50 rounded mt-2\">오류: {llmError}</div>}\r\n                  <div ref={logEndRef} />\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"flex flex-col gap-3\">\r\n            {gameState.choices.map((choice, index) => (\r\n              <button\r\n                key={index}\r\n                className=\"px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-md shadow-lg transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                onClick={() => handleChoiceClick(choice)}\r\n                disabled={isTextLoading || isActionInProgress}\r\n              >\r\n                {choice}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"w-full lg:w-1/3 flex flex-col space-y-6 bg-gray-700 p-4 rounded-lg shadow-inner\">\r\n            <div className=\"mb-2\">\r\n                <div className=\"flex items-center justify-between cursor-pointer select-none\" onClick={() => toggleAccordion('playerInfo')}>\r\n                    <h4 className=\"text-md font-semibold text-gray-200\">내 정보</h4>\r\n                    <div className=\"text-xl\">{accordion.playerInfo ? '▼' : '▲'}</div>\r\n                </div>\r\n                {accordion.playerInfo && gameState.phase === 'playing' && (\r\n                  <div className=\"bg-gray-600 p-3 rounded-md text-xs md:text-sm text-gray-300 space-y-1 h-48 overflow-y-auto custom-scrollbar\">\r\n                    <p><span className=\"font-semibold text-blue-300\">직업:</span> {gameState.player.profession}</p>\r\n                    <p><span className=\"font-semibold text-blue-300\">위치:</span> {gameState.player.currentLocation}</p>\r\n                    <p><span className=\"font-semibold text-blue-300\">능력치:</span> 힘({privatePlayerState.stats.strength}) 지능({privatePlayerState.stats.intelligence}) 민첩({privatePlayerState.stats.agility}) 카리스마({privatePlayerState.stats.charisma})</p>\r\n                    <p><span className=\"font-semibold text-blue-300\">인벤토리:</span> {privatePlayerState.inventory.join(', ') || '비어있음'}</p>\r\n                    <p><span className=\"font-semibold text-blue-300\">퀘스트:</span> {privatePlayerState.activeQuests.join(', ') || '없음'}</p>\r\n                    <p><span className=\"font-semibold text-blue-300\">단서:</span> {privatePlayerState.knownClues.join(', ') || '없음'}</p>\r\n                  </div>\r\n                )}\r\n            </div>\r\n            <div className=\"mb-2\">\r\n                <div className=\"flex items-center justify-between cursor-pointer select-none\" onClick={() => toggleAccordion('users')}>\r\n                    <h4 className=\"text-md font-semibold text-gray-200\">현재 플레이어들</h4>\r\n                    <div className=\"text-xl\">{accordion.users ? '▼' : '▲'}</div>\r\n                </div>\r\n                {accordion.users && (\r\n                    <div className=\"bg-gray-600 p-3 rounded-md h-48 overflow-y-auto custom-scrollbar\">\r\n                        {activeUsers.length > 0 ? (\r\n                            <ul className=\"text-sm text-gray-300 space-y-1\">\r\n                                {activeUsers.map(user => (\r\n                                    <li key={user.id} className=\"truncate p-1 rounded-md\">\r\n                                        <span className=\"font-medium text-green-300\">{getDisplayName(user.id)}</span>\r\n                                        <span className=\"text-gray-400 text-xs\"> ({user.profession || '모험가'})</span>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        ) : <p className=\"text-sm text-gray-400\">활동 중인 플레이어가 없습니다.</p>}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"mb-2\">\r\n                <div className=\"flex items-center justify-between cursor-pointer select-none\" onClick={() => toggleAccordion('chat')}>\r\n                    <h4 className=\"text-md font-semibold text-gray-200\">공개 채팅</h4>\r\n                    <div className=\"text-xl\">{accordion.chat ? '▼' : '▲'}</div>\r\n                </div>\r\n                {accordion.chat && (\r\n                    <div className=\"bg-gray-600 p-3 rounded-md flex flex-col h-64\">\r\n                        <div className=\"flex-grow overflow-y-auto custom-scrollbar mb-3 text-sm space-y-2\">\r\n                            {chatMessages.map((msg) => (\r\n                                <div key={msg.id}><p><span className=\"font-medium text-yellow-300\">{getDisplayName(msg.userId)}:</span> {msg.message}</p></div>\r\n                            ))}\r\n                            <div ref={chatEndRef} />\r\n                        </div>\r\n                        <div className=\"flex\">\r\n                            <input type=\"text\" className=\"flex-grow p-2 rounded-l-md bg-gray-700 border border-gray-600\" value={currentChatMessage} onChange={(e) => setCurrentChatMessage(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()} disabled={!isAuthReady} />\r\n                            <button className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 font-bold rounded-r-md\" onClick={sendChatMessage} disabled={!isAuthReady || !currentChatMessage.trim()}>보내기</button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n      </div>\r\n\r\n      <style>\r\n        {`\r\n        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&display=swap');\r\n        body { font-family: 'Noto Sans KR', sans-serif; }\r\n        .custom-scrollbar::-webkit-scrollbar { width: 8px; }\r\n        .custom-scrollbar::-webkit-scrollbar-track { background: #4a5568; border-radius: 10px; }\r\n        .custom-scrollbar::-webkit-scrollbar-thumb { background: #6b7280; border-radius: 10px; }\r\n        .custom-scrollbar::-webkit-scrollbar-thumb:hover { background: #9ca3af; }\r\n        `}\r\n      </style>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,aAAa,KAAQ,cAAc,CAC5C,OACEC,OAAO,CACPC,iBAAiB,CACjBC,qBAAqB,CACrBC,kBAAkB,KACb,eAAe,CACtB,OACEC,YAAY,CACZC,GAAG,CACHC,MAAM,CACNC,MAAM,CACNC,UAAU,CACVC,KAAK,CACLC,UAAU,CACVC,eAAe,CACfC,MAAM,CACNC,OAAO,CACPC,SAAS,CACTC,KAAK,CACLC,cAAc,KACT,oBAAoB,CAE3B;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBACA,KAAM,CAAAC,qBAAqB,CAAG,CAC5BC,MAAM,CAAE,yCAAyC,CACjDC,UAAU,CAAE,2CAA2C,CACvDC,SAAS,CAAE,2BAA2B,CACtCC,aAAa,CAAE,uCAAuC,CACtDC,iBAAiB,CAAE,eAAe,CAClCC,KAAK,CAAE,4CAA4C,CACnDC,aAAa,CAAE,cACjB,CAAC,CAED;AACA,KAAM,CAAAC,cAAc,CAAGR,qBAAqB,CAC5C,KAAM,CAAAM,KAAK,CAAGE,cAAc,CAACL,SAAS,CACtC,KAAM,CAAAM,gBAAgB,CAAG,IAAI,CAC7B;AAEA,KAAM,CAAAC,WAAW,CAAG,CAClB,GAAG,CAAE,CAAEC,IAAI,CAAE,WAAW,CAAEC,UAAU,CAAE,wCAAyC,CAAC,CAChF,GAAG,CAAE,CAAED,IAAI,CAAE,cAAc,CAAEC,UAAU,CAAE,kCAAmC,CAAC,CAC7E,GAAG,CAAE,CAAED,IAAI,CAAE,YAAY,CAAEC,UAAU,CAAE,0BAA2B,CAAC,CACnE,GAAG,CAAE,CAAED,IAAI,CAAE,QAAQ,CAAEC,UAAU,CAAE,oCAAqC,CAAC,CACzE,GAAG,CAAE,CAAED,IAAI,CAAE,QAAQ,CAAEC,UAAU,CAAE,kDAAmD,CAAC,CACvF,GAAG,CAAE,CAAED,IAAI,CAAE,UAAU,CAAEC,UAAU,CAAE,mCAAoC,CAC3E,CAAC,CAED;AACA,KAAM,CAAAC,kBAAkB,CAAGA,CAACC,EAAE,CAAER,KAAK,GAAKxB,GAAG,CAACgC,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,cAAc,CAAE,MAAM,CAAC,CAC/G,KAAM,CAAAS,wBAAwB,CAAGA,CAACD,EAAE,CAAER,KAAK,CAAEU,MAAM,GAAKlC,GAAG,CAACgC,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,OAAO,CAAEU,MAAM,CAAE,aAAa,CAAE,OAAO,CAAC,CAE5H;AACA,KAAM,CAAAC,mBAAmB,CAAGA,CAAA,IAAO,CACjCC,KAAK,CAAE,oBAAoB,CAC3BC,GAAG,CAAE,CAAE;AACL,CACEC,KAAK,CAAE,CAAEC,WAAW,CAAE,QAAS,CAAC,CAChCC,MAAM,CAAE,OAAO,CACfC,WAAW,CAAE,8FAA8F,CAC3GC,cAAc,CAAE,CAAC,CAAC,CAClBC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACF,CACDC,OAAO,CAAEC,MAAM,CAACC,IAAI,CAACnB,WAAW,CAAC,CAACoB,GAAG,CAACC,GAAG,EAAI,GAAGA,GAAG,KAAKrB,WAAW,CAACqB,GAAG,CAAC,CAACpB,IAAI,EAAE,CAAC,CAChFqB,MAAM,CAAE,CACNC,UAAU,CAAE,EAAE,CACdC,eAAe,CAAE,UACnB,CACF,CAAC,CAAC,CAEF,KAAM,CAAAC,4BAA4B,CAAGA,CAAA,IAAO,CACxCC,KAAK,CAAE,CAAEC,QAAQ,CAAE,EAAE,CAAEC,YAAY,CAAE,EAAE,CAAEC,OAAO,CAAE,EAAE,CAAEC,QAAQ,CAAE,EAAG,CAAC,CACpEC,SAAS,CAAE,EAAE,CACbC,iBAAiB,CAAE,EAAE,CACrBC,UAAU,CAAE,CAAC,CAAC,CACdC,YAAY,CAAE,EAAE,CAChBC,UAAU,CAAE,EAAE,CACdC,UAAU,CAAE,EAChB,CAAC,CAAC,CAGF,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAG5E,QAAQ,CAAC4C,mBAAmB,CAAC,CAAC,CAAC,CACjE,KAAM,CAACiC,kBAAkB,CAAEC,qBAAqB,CAAC,CAAG9E,QAAQ,CAAC8D,4BAA4B,CAAC,CAAC,CAAC,CAC5F,KAAM,CAACiB,aAAa,CAAEC,gBAAgB,CAAC,CAAGhF,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAACiF,WAAW,CAAEC,cAAc,CAAC,CAAGlF,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACmF,YAAY,CAAEC,eAAe,CAAC,CAAGpF,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACqF,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGtF,QAAQ,CAAC,EAAE,CAAC,CAChE,KAAM,CAACuF,YAAY,CAAEC,eAAe,CAAC,CAAGxF,QAAQ,CAAC,IAAI,CAAC,CACtD,KAAM,CAACyF,kBAAkB,CAAEC,qBAAqB,CAAC,CAAG1F,QAAQ,CAAC,KAAK,CAAC,CACnE,KAAM,CAACyC,EAAE,CAAEkD,KAAK,CAAC,CAAG3F,QAAQ,CAAC,IAAI,CAAC,CAClC,KAAM,CAAC4F,IAAI,CAAEC,OAAO,CAAC,CAAG7F,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAAC2C,MAAM,CAAEmD,SAAS,CAAC,CAAG9F,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAAC+F,WAAW,CAAEC,cAAc,CAAC,CAAGhG,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAAAiG,SAAS,CAAG/F,MAAM,CAAC,IAAI,CAAC,CAC9B,KAAM,CAAAgG,UAAU,CAAGhG,MAAM,CAAC,IAAI,CAAC,CAC/B,KAAM,CAACiG,QAAQ,CAAEC,WAAW,CAAC,CAAGpG,QAAQ,CAAC,IAAMqG,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,EAAI,EAAE,CAAC,CACtF,KAAM,CAACC,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGxG,QAAQ,CAAC,CAACqG,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAC7F,KAAM,CAACG,aAAa,CAAEC,gBAAgB,CAAC,CAAG1G,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAAC2G,SAAS,CAAEC,YAAY,CAAC,CAAG5G,QAAQ,CAAC,CAAE6G,OAAO,CAAE,IAAI,CAAEC,IAAI,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,UAAU,CAAE,IAAK,CAAC,CAAC,CACxG,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGlH,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAACmH,WAAW,CAAEC,cAAc,CAAC,CAAGpH,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACqH,QAAQ,CAAEC,WAAW,CAAC,CAAGtH,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAACuH,cAAc,CAAEC,iBAAiB,CAAC,CAAGxH,QAAQ,CAAC,IAAI,CAAC,CAE1D,KAAM,CAAAyH,oBAAoB,CAAGA,CAAA,GAAM,CACjC,GAAIhB,aAAa,CAACiB,IAAI,CAAC,CAAC,CAAE,CACxB,KAAM,CAAAC,aAAa,CAAGlB,aAAa,CAACiB,IAAI,CAAC,CAAC,CAC1CtB,WAAW,CAACuB,aAAa,CAAC,CAC1BtB,YAAY,CAACuB,OAAO,CAAC,UAAU,CAAED,aAAa,CAAC,CAC/CnB,oBAAoB,CAAC,KAAK,CAAC,CAC3B,GAAI7D,MAAM,EAAIF,EAAE,CAAE,CACd,KAAM,CAAAoF,UAAU,CAAGpH,GAAG,CAACgC,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,aAAa,CAAEU,MAAM,CAAC,CACvFjC,MAAM,CAACmH,UAAU,CAAE,CAAE1B,QAAQ,CAAEwB,aAAc,CAAC,CAAE,CAAEG,KAAK,CAAE,IAAK,CAAC,CAAC,CACpE,CACF,CACF,CAAC,CAED,KAAM,CAAAC,cAAc,CAAIC,GAAG,EAAK,CAC9B,GAAIA,GAAG,GAAKrF,MAAM,CAAE,MAAO,CAAAwD,QAAQ,EAAI,QAAQxD,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEsF,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,EAAE,CACxE,KAAM,CAAAC,IAAI,CAAGjD,WAAW,CAACkD,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAKL,GAAG,CAAC,CAChD,MAAO,CAAAE,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAE/B,QAAQ,GAAI,QAAQ6B,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAEC,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,EAAE,CACzD,CAAC,CAED,KAAM,CAAAK,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CAAC7F,EAAE,EAAI,CAACsD,WAAW,CAAE,OACzBqB,cAAc,CAAC,IAAI,CAAC,CACpB,GAAI,CACA,KAAM,CAAAmB,mBAAmB,CAAG,CACxB3H,UAAU,CAAC6B,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,cAAc,CAAC,CACpErB,UAAU,CAAC6B,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,aAAa,CAAC,CACtE,CAED,IAAK,KAAM,CAAAuG,MAAM,GAAI,CAAAD,mBAAmB,CAAE,CACtC,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAxH,OAAO,CAACuH,MAAM,CAAC,CACtC,IAAK,KAAM,CAAAE,OAAO,GAAI,CAAAD,QAAQ,CAACE,IAAI,CAAE,CACjC,KAAM,CAAAzH,SAAS,CAACwH,OAAO,CAACE,GAAG,CAAC,CAChC,CACJ,CAEA,KAAM,CAAAC,WAAW,CAAGjI,UAAU,CAAC6B,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,OAAO,CAAC,CAC/D,KAAM,CAAA6G,aAAa,CAAG,KAAM,CAAA7H,OAAO,CAAC4H,WAAW,CAAC,CAChD,IAAK,KAAM,CAAAE,OAAO,GAAI,CAAAD,aAAa,CAACH,IAAI,CAAE,CACtC,KAAM,CAAAK,iBAAiB,CAAGpI,UAAU,CAAC6B,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,OAAO,CAAE8G,OAAO,CAACV,EAAE,CAAE,aAAa,CAAC,CAChG,KAAM,CAAAY,mBAAmB,CAAG,KAAM,CAAAhI,OAAO,CAAC+H,iBAAiB,CAAC,CAC5D,IAAK,KAAM,CAAAE,QAAQ,GAAI,CAAAD,mBAAmB,CAACN,IAAI,CAAE,CAC7C,KAAM,CAAAzH,SAAS,CAACgI,QAAQ,CAACN,GAAG,CAAC,CACjC,CACJ,CAEA,KAAM,CAAAO,eAAe,CAAG3G,kBAAkB,CAACC,EAAE,CAAER,KAAK,CAAC,CACrD,KAAM,CAAAmH,gBAAgB,CAAGxG,mBAAmB,CAAC,CAAC,CAC9C,KAAM,CAAAlC,MAAM,CAACyI,eAAe,CAAE,CAAE,GAAGC,gBAAgB,CAAEC,QAAQ,CAAED,gBAAgB,CAACtG,GAAG,CAAEwG,UAAU,CAAEvI,eAAe,CAAC,CAAE,CAAC,CAAC,CAErH,KAAM,CAAAwI,aAAa,CAAG9I,GAAG,CAACgC,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,YAAY,CAAE,QAAQ,CAAC,CAC3F,KAAM,CAAAf,SAAS,CAACqI,aAAa,CAAC,CAE9B3E,YAAY,CAACwE,gBAAgB,CAAC,CAC9BtE,qBAAqB,CAAChB,4BAA4B,CAAC,CAAC,CAAC,CACrDsB,eAAe,CAAC,EAAE,CAAC,CAEvB,CAAE,MAAOoE,CAAC,CAAE,CACR;AACA,KAAM,CAAAC,UAAU,CAAG,CACf1G,KAAK,CAAE,CAAEC,WAAW,CAAE,KAAM,CAAC,CAC7BC,MAAM,CAAE,YAAY,CACpBC,WAAW,CAAE,mBAAmB,CAAGsG,CAAC,CAACE,OAAO,CAC5CvG,cAAc,CAAE,CAAC,CAAC,CAClBC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACxB,CAAC,CACDuB,YAAY,CAAC+E,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAE7G,GAAG,CAAE,CAAC,GAAG6G,IAAI,CAAC7G,GAAG,CAAE2G,UAAU,CAAE,CAAC,CAAC,CAAC,CACvE,CAAC,OAAS,CACRrC,cAAc,CAAC,KAAK,CAAC,CACrBF,iBAAiB,CAAC,KAAK,CAAC,CAC1B,CACF,CAAC,CAEDjH,SAAS,CAAC,IAAM,CACd,GAAI,CACF,KAAM,CAAA2J,GAAG,CAAGzJ,aAAa,CAACgC,cAAc,CAAC,CACzC,KAAM,CAAA0H,WAAW,CAAGrJ,YAAY,CAACoJ,GAAG,CAAC,CACrC,KAAM,CAAAE,YAAY,CAAG1J,OAAO,CAACwJ,GAAG,CAAC,CACjCjE,KAAK,CAACkE,WAAW,CAAC,CAClBhE,OAAO,CAACiE,YAAY,CAAC,CACrB,KAAM,CAAAC,eAAe,CAAGxJ,kBAAkB,CAACuJ,YAAY,CAAE,KAAO,CAAA5B,IAAI,EAAK,CACvE,GAAIA,IAAI,CAAE,CACRpC,SAAS,CAACoC,IAAI,CAACF,GAAG,CAAC,CACnBhC,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,IAAM,CACH,MAAO5D,gBAAgB,CAAG9B,qBAAqB,CAACwJ,YAAY,CAAE1H,gBAAgB,CAAC,CAAG/B,iBAAiB,CAACyJ,YAAY,CAAC,CAAC,CACtH,CACF,CAAC,CAAC,CACF,MAAO,IAAMC,eAAe,CAAC,CAAC,CAChC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACxD,CACF,CAAC,CAAE,EAAE,CAAC,CAEN/J,SAAS,CAAC,IAAM,CACd,GAAI,CAACwC,EAAE,EAAI,CAACE,MAAM,EAAI,CAACoD,WAAW,CAAE,OAEpC,KAAM,CAAAmE,eAAe,CAAGxH,wBAAwB,CAACD,EAAE,CAAER,KAAK,CAAEU,MAAM,CAAC,CACnE,KAAM,CAAAwH,WAAW,CAAGrJ,UAAU,CAACoJ,eAAe,CAAGxB,OAAO,EAAK,CACzD,GAAIA,OAAO,CAAC0B,MAAM,CAAC,CAAC,CAAE,CAClBtF,qBAAqB,CAAC4D,OAAO,CAAC2B,IAAI,CAAC,CAAC,CAAC,CACzC,CAAC,IAAM,CACH3J,MAAM,CAACwJ,eAAe,CAAEpG,4BAA4B,CAAC,CAAC,CAAC,CAC3D,CACJ,CAAC,CAAGkG,KAAK,EAAK,CACVC,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAChE,CAAC,CAAC,CAEF,MAAO,IAAMG,WAAW,CAAC,CAAC,CAC5B,CAAC,CAAE,CAAC1H,EAAE,CAAEE,MAAM,CAAEoD,WAAW,CAAC,CAAC,CAE7B9F,SAAS,CAAC,IAAM,CACd,GAAI,CAACwC,EAAE,EAAI,CAACsD,WAAW,EAAI,CAACpD,MAAM,EAAI,CAACiD,IAAI,CAAE,OAE7C,KAAM,CAAA0E,gBAAgB,CAAG7J,GAAG,CAACgC,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,YAAY,CAAE,QAAQ,CAAC,CAC9F,KAAM,CAAAsI,qBAAqB,CAAGzJ,UAAU,CAACwJ,gBAAgB,CAAG5B,OAAO,EAAK,CACtE,KAAM,CAAA2B,IAAI,CAAG3B,OAAO,CAAC2B,IAAI,CAAC,CAAC,CAC3B3E,qBAAqB,CAAC,CAAA2E,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAE5E,kBAAkB,GAAI,KAAK,CAAC,CACxDD,eAAe,CAAC,CAAA6E,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAE9E,YAAY,GAAI,IAAI,CAAC,CAC7C,CAAC,CAAC,CAEF,KAAM,CAAAiF,kBAAkB,CAAG5J,UAAU,CAAC6B,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,cAAc,CAAC,CAC/F,KAAM,CAAAwI,eAAe,CAAG3J,UAAU,CAACD,KAAK,CAAC2J,kBAAkB,CAAC,CAAG/B,QAAQ,EAAK,CACxE,KAAM,CAAAiC,QAAQ,CAAGjC,QAAQ,CAACE,IAAI,CACzBlF,GAAG,CAAChD,GAAG,GAAK,CAAE4H,EAAE,CAAE5H,GAAG,CAAC4H,EAAE,CAAE,GAAG5H,GAAG,CAAC4J,IAAI,CAAC,CAAE,CAAC,CAAC,CAAC,CAC3CM,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,QAAAC,YAAA,CAAAC,YAAA,OAAK,CAAC,EAAAD,YAAA,CAAAF,CAAC,CAACxH,SAAS,UAAA0H,YAAA,iBAAXA,YAAA,CAAaE,QAAQ,CAAC,CAAC,GAAI,CAAC,GAAK,EAAAD,YAAA,CAAAF,CAAC,CAACzH,SAAS,UAAA2H,YAAA,iBAAXA,YAAA,CAAaC,QAAQ,CAAC,CAAC,GAAI,CAAC,CAAC,GAAC,CACpF5F,eAAe,CAACsF,QAAQ,CAAC,CAC7B,CAAC,CAAC,CAEF,KAAM,CAAAO,iBAAiB,CAAGrK,UAAU,CAAC6B,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,aAAa,CAAC,CAC7F,KAAM,CAAAiJ,sBAAsB,CAAGpK,UAAU,CAACD,KAAK,CAACoK,iBAAiB,CAAC,CAAGxC,QAAQ,EAAK,CAChF,KAAM,CAAA0C,UAAU,CAAG9H,IAAI,CAAC+H,GAAG,CAAC,CAAC,CAAG,EAAE,CAAG,IAAI,CACzC,KAAM,CAAArE,KAAK,CAAG0B,QAAQ,CAACE,IAAI,CACxBlF,GAAG,CAAChD,GAAG,GAAK,CAAE4H,EAAE,CAAE5H,GAAG,CAAC4H,EAAE,CAAE,GAAG5H,GAAG,CAAC4J,IAAI,CAAC,CAAE,CAAC,CAAC,CAAC,CAC3CgB,MAAM,CAACnD,IAAI,EAAIA,IAAI,CAACoD,UAAU,EAAIpD,IAAI,CAACoD,UAAU,CAACN,QAAQ,CAAC,CAAC,CAAGG,UAAU,CAAC,CAC7EjG,cAAc,CAAC6B,KAAK,CAAC,CACvB,CAAC,CAAC,CAEF,KAAM,CAAAwE,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI5I,MAAM,CAAE,CACV,KAAM,CAAAkF,UAAU,CAAGpH,GAAG,CAACgC,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,aAAa,CAAEU,MAAM,CAAC,CACvF,KAAM,CAAAjC,MAAM,CAACmH,UAAU,CAAE,CACvByD,UAAU,CAAEvK,eAAe,CAAC,CAAC,CAC7BoF,QAAQ,CAAEA,QAAQ,EAAI,QAAQxD,MAAM,CAACsF,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,EAAE,CACtDrE,UAAU,CAAEe,SAAS,CAAChB,MAAM,CAACC,UAC/B,CAAC,CAAE,CAAEkE,KAAK,CAAE,IAAK,CAAC,CAAC,CACrB,CACF,CAAC,CACDyD,kBAAkB,CAAC,CAAC,CACpB,KAAM,CAAAC,gBAAgB,CAAGC,WAAW,CAACF,kBAAkB,CAAE,KAAK,CAAC,CAE/D,MAAO,IAAM,CACXhB,qBAAqB,CAAC,CAAC,CACvBE,eAAe,CAAC,CAAC,CACjBS,sBAAsB,CAAC,CAAC,CACxBQ,aAAa,CAACF,gBAAgB,CAAC,CACjC,CAAC,CACH,CAAC,CAAE,CAAC/I,EAAE,CAAEsD,WAAW,CAAEpD,MAAM,CAAEiD,IAAI,CAAEO,QAAQ,CAAExB,SAAS,CAAChB,MAAM,CAACC,UAAU,CAAC,CAAC,CAE1E3D,SAAS,CAAC,IAAM,CACd,GAAI0G,SAAS,CAACE,OAAO,EAAIZ,SAAS,CAAC0F,OAAO,CAAE1F,SAAS,CAAC0F,OAAO,CAACC,cAAc,CAAC,CAAEC,QAAQ,CAAE,QAAS,CAAC,CAAC,CACtG,CAAC,CAAE,CAAClH,SAAS,CAAC7B,GAAG,CAAE6D,SAAS,CAACE,OAAO,CAAC,CAAC,CAEtC5G,SAAS,CAAC,IAAM,CACd,GAAI0G,SAAS,CAACG,IAAI,EAAIZ,UAAU,CAACyF,OAAO,CAAEzF,UAAU,CAACyF,OAAO,CAACC,cAAc,CAAC,CAAEC,QAAQ,CAAE,QAAS,CAAC,CAAC,CACrG,CAAC,CAAE,CAAC1G,YAAY,CAAEwB,SAAS,CAACG,IAAI,CAAC,CAAC,CAElC,KAAM,CAAAgF,YAAY,CAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAED,KAAM,CAAAC,iBAAiB,CAAG,KAAO,CAAAC,UAAU,EAAK,CAC9ChH,gBAAgB,CAAC,IAAI,CAAC,CACtBwC,iBAAiB,CAACwE,UAAU,CAAC,CAC7B,KAAM,CAAAC,UAAU,CAAG,yCAAyC,CAC5D,KAAM,CAAAC,YAAY,CAAG,yCAAyC,CAC9D,KAAM,CAAAC,SAAS,CAAIvK,MAAM,EAAK,gGAAgGA,MAAM,EAAE,CAEtI;AACA,KAAM,CAAAwK,OAAO,CAAGJ,UAAU,CAACI,OAAO,CAAC3I,GAAG,CAAC4I,KAAK,EAAIA,KAAK,CAACnJ,WAAW,CAAC,CAACoJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAE5E,KAAM,CAAAC,UAAU,CAAG;AACvB;AACA;AACA;AACA;AACA,iBAAiBP,UAAU,CAACQ,UAAU,CAAC3I,eAAe;AACtD,+BAA+B4I,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC;AACtD;AACA;AACA,cAAcJ,UAAU,CAACW,WAAW,CAAC/I,UAAU,EAAIe,SAAS,CAAChB,MAAM,CAACC,UAAU;AAC9E,eAAe6I,IAAI,CAACC,SAAS,CAACV,UAAU,CAACW,WAAW,CAAC5I,KAAK,CAAC;AAC3D,gBAAgB0I,IAAI,CAACC,SAAS,CAACV,UAAU,CAACW,WAAW,CAACvI,SAAS,CAAC;AAChE,kBAAkBqI,IAAI,CAACC,SAAS,CAACV,UAAU,CAACW,WAAW,CAACpI,YAAY,CAAC;AACrE,kBAAkBkI,IAAI,CAACC,SAAS,CAACV,UAAU,CAACW,WAAW,CAAClI,UAAU,CAAC;AACnE,cAAcgI,IAAI,CAACC,SAAS,CAACV,UAAU,CAACW,WAAW,CAACrI,UAAU,CAAC;AAC/D;AACA;AACA,eAAe0H,UAAU,CAACY,YAAY;AACtC;AACA;AACA,UAAUZ,UAAU,CAAC/G,WAAW,CAAC4H,MAAM,CAAG,CAAC,CAAGJ,IAAI,CAACC,SAAS,CAACV,UAAU,CAAC/G,WAAW,CAAC,CAAG,uBAAuB;AAC9G,KAAK,CAED,KAAM,CAAA6H,OAAO,CAAG,CAAEC,QAAQ,CAAE,CAAC,CAAEC,IAAI,CAAE,MAAM,CAAEC,KAAK,CAAE,CAAC,CAAEC,IAAI,CAAEpB,YAAa,CAAC,CAAE,CAAC,CAAE,CAAEkB,IAAI,CAAE,OAAO,CAAEC,KAAK,CAAE,CAAC,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAE,CAAC,CAAE,CAAEF,IAAI,CAAE,MAAM,CAAEC,KAAK,CAAE,CAAC,CAAEC,IAAI,CAAEX,UAAW,CAAC,CAAE,CAAC,CAAE,CAAC,CAE9K,KAAM,CAAAY,aAAa,CAAG,KAAO,CAAAvL,MAAM,EAAKwL,KAAK,CAACjB,SAAS,CAACvK,MAAM,CAAC,CAAE,CAAEyL,MAAM,CAAE,MAAM,CAAEC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAAEC,IAAI,CAAEd,IAAI,CAACC,SAAS,CAACI,OAAO,CAAE,CAAC,CAAC,CAEpK,GAAI,KAAAU,kBAAA,CAAAC,mBAAA,CAAAC,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CACF,GAAI,CAAAC,QAAQ,CAAG,KAAM,CAAAV,aAAa,CAAClB,UAAU,CAAC,CAC9C,GAAI,CAAC4B,QAAQ,CAACC,EAAE,CAAE,CAChBD,QAAQ,CAAG,KAAM,CAAAV,aAAa,CAACjB,YAAY,CAAC,CAC9C,CACA,GAAI,CAAC2B,QAAQ,CAACC,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC,CAC3D,CACA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CACpC,KAAM,CAAAC,aAAa,EAAAX,kBAAA,CAAGS,MAAM,CAACG,UAAU,UAAAZ,kBAAA,kBAAAC,mBAAA,CAAjBD,kBAAA,CAAoB,CAAC,CAAC,UAAAC,mBAAA,kBAAAC,qBAAA,CAAtBD,mBAAA,CAAwBY,OAAO,UAAAX,qBAAA,kBAAAC,sBAAA,CAA/BD,qBAAA,CAAiCT,KAAK,UAAAU,sBAAA,kBAAAC,sBAAA,CAAtCD,sBAAA,CAAyC,CAAC,CAAC,UAAAC,sBAAA,iBAA3CA,sBAAA,CAA6CV,IAAI,CACvE,KAAM,CAAAoB,SAAS,CAAGH,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAEI,KAAK,CAAC,aAAa,CAAC,CACrD,GAAID,SAAS,CAAE,MAAO,CAAA7B,IAAI,CAAC+B,KAAK,CAACF,SAAS,CAAC,CAAC,CAAC,CAAC,CAC9C,KAAM,IAAI,CAAAP,KAAK,CAAC,8CAA8C,CAAC,CACjE,CAAE,MAAO/D,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C1C,WAAW,CAAC0C,KAAK,CAACN,OAAO,EAAI,WAAW,CAAC,CACzC,MAAO,KAAI,CACb,CAAC,OAAS,CACR1E,gBAAgB,CAAC,KAAK,CAAC,CACzB,CACF,CAAC,CAED,KAAM,CAAAyJ,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CAAChM,EAAE,EAAI,CAACE,MAAM,EAAI,CAACoD,WAAW,EAAI,CAACV,kBAAkB,CAACqC,IAAI,CAAC,CAAC,CAAE,OAClE,GAAI,CACF,KAAM,CAAAgH,iBAAiB,CAAG9N,UAAU,CAAC6B,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,cAAc,CAAC,CAC9F,KAAM,CAAAjB,MAAM,CAAC0N,iBAAiB,CAAE,CAAE/L,MAAM,CAAEK,WAAW,CAAE+E,cAAc,CAACpF,MAAM,CAAC,CAAE+G,OAAO,CAAErE,kBAAkB,CAAEjC,SAAS,CAAErC,eAAe,CAAC,CAAE,CAAC,CAAC,CAC3IuE,qBAAqB,CAAC,EAAE,CAAC,CAC3B,CAAE,MAAO0E,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CACF,CAAC,CAED/J,SAAS,CAAC,IAAM,CACd,GAAI,CAACwC,EAAE,EAAI,CAACR,KAAK,EAAI,CAAC8D,WAAW,CAAE,OACnC,KAAM,CAAA6C,GAAG,CAAGpG,kBAAkB,CAACC,EAAE,CAAER,KAAK,CAAC,CACzC,KAAM,CAAAkI,WAAW,CAAGrJ,UAAU,CAAC8H,GAAG,CAAE,KAAO,CAAA+F,IAAI,EAAK,CAClD,GAAIA,IAAI,CAACvE,MAAM,CAAC,CAAC,CAAE,CACjB,KAAM,CAAAC,IAAI,CAAGsE,IAAI,CAACtE,IAAI,CAAC,CAAC,CACxBzF,YAAY,CAAC+E,IAAI,OAAAiF,YAAA,OAAK,CACpB,GAAGjF,IAAI,CACP7G,GAAG,CAAEuH,IAAI,CAAChB,QAAQ,EAAIM,IAAI,CAAC7G,GAAG,CAAE;AAChCQ,OAAO,CAAE+G,IAAI,CAAC/G,OAAO,EAAI,EAAE,CAC3BT,KAAK,CAAEwH,IAAI,CAACxH,KAAK,EAAI8G,IAAI,CAAC9G,KAAK,CAC/Bc,MAAM,CAAE,CAAE,GAAGgG,IAAI,CAAChG,MAAM,CAAEE,eAAe,CAAE,EAAA+K,YAAA,CAAAvE,IAAI,CAAC1G,MAAM,UAAAiL,YAAA,iBAAXA,YAAA,CAAa/K,eAAe,GAAI8F,IAAI,CAAChG,MAAM,CAACE,eAAgB,CACzG,CAAC,EAAC,CAAC,CACL,CAAC,IAAM,CACL,KAAM,CAAAgL,GAAG,CAAGjM,mBAAmB,CAAC,CAAC,CACjC,GAAI,CACA,KAAM,CAAAlC,MAAM,CAACkI,GAAG,CAAE,CAAE,GAAGiG,GAAG,CAAExF,QAAQ,CAAEwF,GAAG,CAAC/L,GAAG,CAAEwG,UAAU,CAAEvI,eAAe,CAAC,CAAE,CAAC,CAAE,CAAE+G,KAAK,CAAE,IAAK,CAAC,CAAC,CAChGlD,YAAY,CAACiK,GAAG,CAAC,CACrB,CAAE,MAAOrF,CAAC,CAAE,CACRS,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAER,CAAC,CAAC,CAC1D,CACF,CACF,CAAC,CAAGQ,KAAK,EAAK,CACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD1C,WAAW,CAAC,0CAA0C,CAAC,CACzD,CAAC,CAAC,CACF,MAAO,IAAM6C,WAAW,CAAC,CAAC,CAC5B,CAAC,CAAE,CAAC1H,EAAE,CAAER,KAAK,CAAE8D,WAAW,CAAC,CAAC,CAE5B;AACA,KAAM,CAAA+I,sBAAsB,CAAG,KAAAA,CAAOC,WAAW,CAAEnC,YAAY,GAAK,CAClE,GAAI,CAACnK,EAAE,EAAI,CAACR,KAAK,EAAI,CAACU,MAAM,CAAE,OAE9B,KAAM,CAAAwG,eAAe,CAAG3G,kBAAkB,CAACC,EAAE,CAAER,KAAK,CAAC,CACrD,KAAM,CAAA+M,UAAU,CAAG,CAAC,IAAID,WAAW,CAACzL,OAAO,EAAI,EAAE,CAAC,CAAE,IAAIyL,WAAW,CAACE,cAAc,EAAI,EAAE,CAAC,CAAC,CAE1F;AACA,KAAM,CAAAC,QAAQ,CAAG,CACbnM,KAAK,CAAE,CAAEsF,EAAE,CAAE1F,MAAM,CAAEK,WAAW,CAAE+E,cAAc,CAACpF,MAAM,CAAE,CAAC,CAC1DM,MAAM,CAAE2J,YAAY,CAAE;AACtB1J,WAAW,CAAE6L,WAAW,CAACI,KAAK,EAAI,kBAAkB,CACpDhM,cAAc,CAAE,CACZ,CAACR,MAAM,EAAGoM,WAAW,CAACK,YAAY,EAAI,IAC1C,CAAC,CACDhM,SAAS,CAAErC,eAAe,CAAC,CAC/B,CAAC,CAED,GAAI,CACA,KAAM,CAAAK,cAAc,CAACqB,EAAE,CAAE,KAAO,CAAA4M,WAAW,EAAK,KAAAC,qBAAA,CAC5C,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAF,WAAW,CAACG,GAAG,CAACrG,eAAe,CAAC,CAC1D,GAAI,CAACoG,WAAW,CAACnF,MAAM,CAAC,CAAC,CAAE,KAAM,qBAAqB,CAEtD,KAAM,CAAAqF,WAAW,CAAGF,WAAW,CAAClF,IAAI,CAAC,CAAC,CACtC;AACA,KAAM,CAAAqF,WAAW,CAAG,CAAC,IAAID,WAAW,CAACpG,QAAQ,EAAI,EAAE,CAAC,CAAE6F,QAAQ,CAAC,CAE/DG,WAAW,CAACM,MAAM,CAACxG,eAAe,CAAE,CAChCE,QAAQ,CAAEqG,WAAW,CACrBpM,OAAO,CAAE0L,UAAU,CACnBnM,KAAK,CAAE,SAAS,CAChB,wBAAwB,CAAE,EAAAyM,qBAAA,CAAAP,WAAW,CAACa,kBAAkB,UAAAN,qBAAA,iBAA9BA,qBAAA,CAAgCO,QAAQ,GAAIJ,WAAW,CAAC9L,MAAM,CAACE,eAAe,CACxGyF,UAAU,CAAEvI,eAAe,CAAC,CAChC,CAAC,CAAC,CACN,CAAC,CAAC,CAEF;AACA,KAAM,CAAAmJ,eAAe,CAAGxH,wBAAwB,CAACD,EAAE,CAAER,KAAK,CAAEU,MAAM,CAAC,CACnE,GAAIoM,WAAW,CAACe,mBAAmB,CAAE,CACjC;AACA,KAAM,CAAApP,MAAM,CAACwJ,eAAe,CAAE6E,WAAW,CAACe,mBAAmB,CAAE,CAAEhI,KAAK,CAAE,KAAM,CAAC,CAAC,CACpF,CACJ,CAAE,MAAOkC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAAC,CACtC1C,WAAW,CAAC,wBAAwB,CAAC,CACzC,CACF,CAAC,CAED,KAAM,CAAAyI,iBAAiB,CAAG,KAAO,CAAAC,MAAM,EAAK,CAC1C,GAAIjL,aAAa,EAAIU,kBAAkB,CAAE,OAEzC,KAAM,CAAA8D,aAAa,CAAG9I,GAAG,CAACgC,EAAE,CAAE,WAAW,CAAER,KAAK,CAAE,QAAQ,CAAE,MAAM,CAAE,YAAY,CAAE,QAAQ,CAAC,CAE3F,GAAI,CACF,KAAM,CAAAb,cAAc,CAACqB,EAAE,CAAE,KAAO,CAAA4M,WAAW,EAAK,CAC9C,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAZ,WAAW,CAACG,GAAG,CAACjG,aAAa,CAAC,CACtD,GAAI0G,SAAS,CAAC7F,MAAM,CAAC,CAAC,EAAI6F,SAAS,CAAC5F,IAAI,CAAC,CAAC,CAAC5E,kBAAkB,CAAE,CAC7D,KAAM,IAAI,CAAAsI,KAAK,CAAC,mCAAmC,CAAC,CACtD,CACAsB,WAAW,CAACa,GAAG,CAAC3G,aAAa,CAAE,CAC7B9D,kBAAkB,CAAE,IAAI,CACxBF,YAAY,CAAE,CAAE8C,EAAE,CAAE1F,MAAM,CAAEK,WAAW,CAAE+E,cAAc,CAACpF,MAAM,CAAE,CAClE,CAAC,CAAE,CAAEmF,KAAK,CAAE,IAAK,CAAC,CAAC,CACrB,CAAC,CAAC,CAEF,GAAInD,SAAS,CAAC9B,KAAK,GAAK,oBAAoB,CAAE,CAC5C,KAAM,CAAAsN,SAAS,CAAGH,MAAM,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACtC,KAAM,CAAAC,kBAAkB,CAAGhO,WAAW,CAAC8N,SAAS,CAAC,CACjD,GAAIE,kBAAkB,CAAE,CACtB,KAAM,CAAAhM,iBAAiB,CAAGgM,kBAAkB,CAAC9N,UAAU,CACvD,KAAM,CAAAe,OAAO,CAAG,CAAC,WAAW,CAAE,iBAAiB,CAAE,kBAAkB,CAAC,CAEpE,KAAM,CAAA4L,QAAQ,CAAG,CACfnM,KAAK,CAAE,CAAEsF,EAAE,CAAE1F,MAAM,CAAEK,WAAW,CAAE+E,cAAc,CAACpF,MAAM,CAAE,CAAC,CAC1DM,MAAM,CAAE+M,MAAM,CACd9M,WAAW,CAAE,QAAQmN,kBAAkB,CAAC/N,IAAI,SAAS+B,iBAAiB,EAAE,CACxElB,cAAc,CAAE,CAAC,CAAC,CAClBC,SAAS,CAAErC,eAAe,CAAC,CAC7B,CAAC,CAED,KAAM,CAAAoI,eAAe,CAAG3G,kBAAkB,CAACC,EAAE,CAAER,KAAK,CAAC,CACrD;AACA,KAAM,CAAAyG,OAAO,CAAG,KAAM,CAAA/H,MAAM,CAACwI,eAAe,CAAC,CAC7C,KAAM,CAAAmH,UAAU,CAAG5H,OAAO,CAAC0B,MAAM,CAAC,CAAC,CAAG1B,OAAO,CAAC2B,IAAI,CAAC,CAAC,CAAChB,QAAQ,CAAG,EAAE,CAElE,KAAM,CAAA3I,MAAM,CAACyI,eAAe,CAAE,CAC1BtG,KAAK,CAAE,SAAS,CAChBwG,QAAQ,CAAE,CAAC,GAAGiH,UAAU,CAAEpB,QAAQ,CAAC,CACnC5L,OAAO,CAAEA,OAAO,CAChBgG,UAAU,CAAEvI,eAAe,CAAC,CAChC,CAAC,CAAE,CAAE+G,KAAK,CAAE,IAAK,CAAC,CAAC,CAEnB,KAAM,CAAAoC,eAAe,CAAGxH,wBAAwB,CAACD,EAAE,CAAER,KAAK,CAAEU,MAAM,CAAC,CACnE,KAAM,CAAA4N,eAAe,CAAGzM,4BAA4B,CAAC,CAAC,CACtDyM,eAAe,CAAClM,iBAAiB,CAAGA,iBAAiB,CACrD,KAAM,CAAA3D,MAAM,CAACwJ,eAAe,CAAEqG,eAAe,CAAE,CAAEzI,KAAK,CAAE,IAAK,CAAC,CAAC,CAE/DlD,YAAY,CAAC+E,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAEhG,MAAM,CAAE,CAAC,GAAGgG,IAAI,CAAChG,MAAM,CAAEC,UAAU,CAAEyM,kBAAkB,CAAC/N,IAAK,CAAC,CAAC,CAAC,CAAC,CAClG,OAAQ;AACV,CACF,CAEA;AACA,KAAM,CAAA0J,UAAU,CAAG,CACjBY,YAAY,CAAEoD,MAAM,CACpBxD,UAAU,CAAE,CAAE3I,eAAe,CAAEc,SAAS,CAAChB,MAAM,CAACE,eAAgB,CAAC,CACjE8I,WAAW,CAAE,CAAE,GAAG9H,kBAAkB,CAAEjB,UAAU,CAAEe,SAAS,CAAChB,MAAM,CAACC,UAAW,CAAC,CAC/EwI,OAAO,CAAEzH,SAAS,CAAC7B,GAAG,CAAE;AACxBmC,WAAW,CAAEA,WAAW,CAACxB,GAAG,CAAC2E,CAAC,GAAK,CAAEjC,QAAQ,CAAE4B,cAAc,CAACK,CAAC,CAACC,EAAE,CAAC,CAAEzE,UAAU,CAAEwE,CAAC,CAACxE,UAAW,CAAC,CAAC,CAAC,CAACyH,MAAM,CAACjD,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAK1F,MAAM,CAC/H,CAAC,CAED,KAAM,CAAAoM,WAAW,CAAG,KAAM,CAAAhD,iBAAiB,CAACC,UAAU,CAAC,CACvD,GAAI+C,WAAW,CAAE,CACf;AACA,KAAM,CAAAD,sBAAsB,CAACC,WAAW,CAAEiB,MAAM,CAAC,CACjD1I,WAAW,CAAC,IAAI,CAAC,CACnB,CAAC,IAAM,CACL,KAAM,IAAI,CAAAyG,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CACF,CAAE,MAAO/D,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,aAAa,CAAEA,KAAK,CAACN,OAAO,CAAC,CAC3CpC,WAAW,CAAC0C,KAAK,CAACN,OAAO,CAAC,CAC5B,CAAC,OAAS,CACR,KAAM,CAAAhJ,MAAM,CAAC6I,aAAa,CAAE,CAAE9D,kBAAkB,CAAE,KAAK,CAAEF,YAAY,CAAE,IAAK,CAAC,CAAE,CAAEuC,KAAK,CAAE,IAAK,CAAC,CAAC,CAC/F9C,gBAAgB,CAAC,KAAK,CAAC,CACzB,CACF,CAAC,CAED,KAAM,CAAAwL,eAAe,CAAI9M,GAAG,EAAK,CAC/BkD,YAAY,CAAC+C,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAE,CAACjG,GAAG,EAAG,CAACiG,IAAI,CAACjG,GAAG,CAAE,CAAC,CAAC,CAAC,CACxD,CAAC,CAED,mBACElC,KAAA,QAAKiP,SAAS,CAAC,gGAAgG,CAAAC,QAAA,EAC5GnK,iBAAiB,eAChBjF,IAAA,QAAKmP,SAAS,CAAC,gFAAgF,CAAAC,QAAA,cAC7FlP,KAAA,QAAKiP,SAAS,CAAC,gEAAgE,CAAAC,QAAA,eAC7EpP,IAAA,OAAImP,SAAS,CAAC,iCAAiC,CAAAC,QAAA,CAAC,yDAAU,CAAI,CAAC,cAC/DpP,IAAA,UACEmP,SAAS,CAAC,yJAAyJ,CACnKE,WAAW,CAAC,oBAAK,CACjBC,KAAK,CAAEnK,aAAc,CACrBoK,QAAQ,CAAErH,CAAC,EAAI9C,gBAAgB,CAAC8C,CAAC,CAACsH,MAAM,CAACF,KAAK,CAAE,CAChDG,SAAS,CAAEvH,CAAC,EAAI,CAAE,GAAIA,CAAC,CAAC9F,GAAG,GAAK,OAAO,CAAE+D,oBAAoB,CAAC,CAAC,CAAE,CAAE,CACnEuJ,SAAS,MACV,CAAC,cACF1P,IAAA,WACEmP,SAAS,CAAC,4HAA4H,CACtIQ,OAAO,CAAExJ,oBAAqB,CAC9ByJ,QAAQ,CAAE,CAACzK,aAAa,CAACiB,IAAI,CAAC,CAAE,CAAAgJ,QAAA,CACjC,0BAED,CAAQ,CAAC,EACN,CAAC,CACH,CACN,CAEAzJ,cAAc,eACb3F,IAAA,QAAKmP,SAAS,CAAC,gFAAgF,CAAAC,QAAA,cAC7FlP,KAAA,QAAKiP,SAAS,CAAC,gEAAgE,CAAAC,QAAA,eAC7EpP,IAAA,OAAImP,SAAS,CAAC,gCAAgC,CAAAC,QAAA,CAAC,0FAAkB,CAAI,CAAC,cACtEpP,IAAA,MAAGmP,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,wNAAiD,CAAG,CAAC,cAClFlP,KAAA,QAAKiP,SAAS,CAAC,wBAAwB,CAAAC,QAAA,eACrCpP,IAAA,WAAQmP,SAAS,CAAC,8DAA8D,CAACQ,OAAO,CAAEA,CAAA,GAAM/J,iBAAiB,CAAC,KAAK,CAAE,CAACgK,QAAQ,CAAE/J,WAAY,CAAAuJ,QAAA,CAAC,cAAE,CAAQ,CAAC,cAC5JpP,IAAA,WAAQmP,SAAS,CAAC,4DAA4D,CAACQ,OAAO,CAAE3I,gBAAiB,CAAC4I,QAAQ,CAAE/J,WAAY,CAAAuJ,QAAA,CAAEvJ,WAAW,CAAG,UAAU,CAAG,KAAK,CAAS,CAAC,EACzK,CAAC,EACH,CAAC,CACH,CACN,cAED3F,KAAA,QAAKiP,SAAS,CAAC,4HAA4H,CAAAC,QAAA,eACzIlP,KAAA,QAAKiP,SAAS,CAAC,yCAAyC,CAAAC,QAAA,eACtDlP,KAAA,QAAKiP,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnBlP,KAAA,QAAKiP,SAAS,CAAC,8DAA8D,CAACQ,OAAO,CAAEA,CAAA,GAAMT,eAAe,CAAC,SAAS,CAAE,CAAAE,QAAA,eACtHpP,IAAA,OAAImP,SAAS,CAAC,iCAAiC,CAAAC,QAAA,CAAC,2BAAK,CAAI,CAAC,cAC1DpP,IAAA,QAAKmP,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAE/J,SAAS,CAACE,OAAO,CAAG,GAAG,CAAG,GAAG,CAAM,CAAC,EAC3D,CAAC,CACLF,SAAS,CAACE,OAAO,eAChBrF,KAAA,CAAAE,SAAA,EAAAgP,QAAA,eACEpP,IAAA,QAAKmP,SAAS,CAAC,uBAAuB,CAAAC,QAAA,cACpCpP,IAAA,WAAQmP,SAAS,CAAC,qEAAqE,CAACQ,OAAO,CAAEA,CAAA,GAAM/J,iBAAiB,CAAC,IAAI,CAAE,CAAAwJ,QAAA,CAAC,oDAAU,CAAQ,CAAC,CAChJ,CAAC,cAENlP,KAAA,QAAKiP,SAAS,CAAC,iHAAiH,CAACU,KAAK,CAAE,CAAEC,SAAS,CAAE,OAAQ,CAAE,CAAAV,QAAA,EAC5J/L,SAAS,CAAC7B,GAAG,CAACW,GAAG,CAAC,CAAC4I,KAAK,CAAEgF,KAAK,QAAAC,YAAA,oBAC9B9P,KAAA,QAAiBiP,SAAS,CAAC,iCAAiC,CAAAC,QAAA,EACzD,EAAAY,YAAA,CAAAjF,KAAK,CAACtJ,KAAK,UAAAuO,YAAA,iBAAXA,YAAA,CAAatO,WAAW,GAAIqJ,KAAK,CAACpJ,MAAM,eACtCzB,KAAA,MAAGiP,SAAS,CAAC,8CAA8C,CAAAC,QAAA,EACvDrE,KAAK,CAACtJ,KAAK,CAACC,WAAW,CAAC,gBAAI,CAACqJ,KAAK,CAACpJ,MAAM,CAAC,eAC9C,EAAG,CACL,cACD3B,IAAA,MAAGmP,SAAS,CAAC,0BAA0B,CAACc,uBAAuB,CAAE,CAAEC,MAAM,CAAE,CAACnF,KAAK,CAACnJ,WAAW,EAAI,EAAE,EAAEuO,OAAO,CAAC,KAAK,CAAE,QAAQ,CAAE,CAAE,CAAI,CAAC,CACpIpF,KAAK,CAAClJ,cAAc,EAAIkJ,KAAK,CAAClJ,cAAc,CAACR,MAAM,CAAC,eACnDnB,KAAA,MAAGiP,SAAS,CAAC,8FAA8F,CAAAC,QAAA,eACzGpP,IAAA,SAAMmP,SAAS,CAAC,WAAW,CAAAC,QAAA,CAAC,iDAAY,CAAM,CAAC,CAC9CrE,KAAK,CAAClJ,cAAc,CAACR,MAAM,CAAC,EAC5B,CACJ,GAZO0O,KAaL,CAAC,EACP,CAAC,CACDtM,aAAa,eACZvD,KAAA,QAAKiP,SAAS,CAAC,uCAAuC,CAAAC,QAAA,eACpDpP,IAAA,QAAKmP,SAAS,CAAC,8DAA8D,CAAM,CAAC,cACpFnP,IAAA,SAAMmP,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAC,iDAAY,CAAM,CAAC,EACrD,CACN,CACAjL,kBAAkB,GAAK,CAACF,YAAY,EAAIA,YAAY,CAAC8C,EAAE,GAAK1F,MAAM,CAAC,eAChErB,IAAA,QAAKmP,SAAS,CAAC,sFAAsF,CAAAC,QAAA,CAChGnL,YAAY,CAAG,GAAGwC,cAAc,CAACxC,YAAY,CAAC8C,EAAE,CAAC,iBAAiB,CAAG,uBAAuB,CAC5F,CACR,CACAhB,QAAQ,eAAI7F,KAAA,QAAKiP,SAAS,CAAC,wDAAwD,CAAAC,QAAA,EAAC,gBAAI,CAACrJ,QAAQ,EAAM,CAAC,cACzG/F,IAAA,QAAKsH,GAAG,CAAE3C,SAAU,CAAE,CAAC,EACpB,CAAC,EACN,CACH,EACE,CAAC,cAEN3E,IAAA,QAAKmP,SAAS,CAAC,qBAAqB,CAAAC,QAAA,CACjC/L,SAAS,CAACrB,OAAO,CAACG,GAAG,CAAC,CAACuM,MAAM,CAAEqB,KAAK,gBACnC/P,IAAA,WAEEmP,SAAS,CAAC,2JAA2J,CACrKQ,OAAO,CAAEA,CAAA,GAAMlB,iBAAiB,CAACC,MAAM,CAAE,CACzCkB,QAAQ,CAAEnM,aAAa,EAAIU,kBAAmB,CAAAiL,QAAA,CAE7CV,MAAM,EALFqB,KAMC,CACT,CAAC,CACC,CAAC,EACH,CAAC,cAEN7P,KAAA,QAAKiP,SAAS,CAAC,iFAAiF,CAAAC,QAAA,eAC5FlP,KAAA,QAAKiP,SAAS,CAAC,MAAM,CAAAC,QAAA,eACjBlP,KAAA,QAAKiP,SAAS,CAAC,8DAA8D,CAACQ,OAAO,CAAEA,CAAA,GAAMT,eAAe,CAAC,YAAY,CAAE,CAAAE,QAAA,eACvHpP,IAAA,OAAImP,SAAS,CAAC,qCAAqC,CAAAC,QAAA,CAAC,qBAAI,CAAI,CAAC,cAC7DpP,IAAA,QAAKmP,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAE/J,SAAS,CAACK,UAAU,CAAG,GAAG,CAAG,GAAG,CAAM,CAAC,EAChE,CAAC,CACLL,SAAS,CAACK,UAAU,EAAIrC,SAAS,CAAC9B,KAAK,GAAK,SAAS,eACpDrB,KAAA,QAAKiP,SAAS,CAAC,6GAA6G,CAAAC,QAAA,eAC1HlP,KAAA,MAAAkP,QAAA,eAAGpP,IAAA,SAAMmP,SAAS,CAAC,6BAA6B,CAAAC,QAAA,CAAC,eAAG,CAAM,CAAC,IAAC,CAAC/L,SAAS,CAAChB,MAAM,CAACC,UAAU,EAAI,CAAC,cAC7FpC,KAAA,MAAAkP,QAAA,eAAGpP,IAAA,SAAMmP,SAAS,CAAC,6BAA6B,CAAAC,QAAA,CAAC,eAAG,CAAM,CAAC,IAAC,CAAC/L,SAAS,CAAChB,MAAM,CAACE,eAAe,EAAI,CAAC,cAClGrC,KAAA,MAAAkP,QAAA,eAAGpP,IAAA,SAAMmP,SAAS,CAAC,6BAA6B,CAAAC,QAAA,CAAC,qBAAI,CAAM,CAAC,WAAG,CAAC7L,kBAAkB,CAACd,KAAK,CAACC,QAAQ,CAAC,iBAAK,CAACa,kBAAkB,CAACd,KAAK,CAACE,YAAY,CAAC,iBAAK,CAACY,kBAAkB,CAACd,KAAK,CAACG,OAAO,CAAC,6BAAO,CAACW,kBAAkB,CAACd,KAAK,CAACI,QAAQ,CAAC,GAAC,EAAG,CAAC,cACpO3C,KAAA,MAAAkP,QAAA,eAAGpP,IAAA,SAAMmP,SAAS,CAAC,6BAA6B,CAAAC,QAAA,CAAC,2BAAK,CAAM,CAAC,IAAC,CAAC7L,kBAAkB,CAACT,SAAS,CAACsN,IAAI,CAAC,IAAI,CAAC,EAAI,MAAM,EAAI,CAAC,cACrHlQ,KAAA,MAAAkP,QAAA,eAAGpP,IAAA,SAAMmP,SAAS,CAAC,6BAA6B,CAAAC,QAAA,CAAC,qBAAI,CAAM,CAAC,IAAC,CAAC7L,kBAAkB,CAACN,YAAY,CAACmN,IAAI,CAAC,IAAI,CAAC,EAAI,IAAI,EAAI,CAAC,cACrHlQ,KAAA,MAAAkP,QAAA,eAAGpP,IAAA,SAAMmP,SAAS,CAAC,6BAA6B,CAAAC,QAAA,CAAC,eAAG,CAAM,CAAC,IAAC,CAAC7L,kBAAkB,CAACJ,UAAU,CAACiN,IAAI,CAAC,IAAI,CAAC,EAAI,IAAI,EAAI,CAAC,EAC/G,CACN,EACA,CAAC,cACNlQ,KAAA,QAAKiP,SAAS,CAAC,MAAM,CAAAC,QAAA,eACjBlP,KAAA,QAAKiP,SAAS,CAAC,8DAA8D,CAACQ,OAAO,CAAEA,CAAA,GAAMT,eAAe,CAAC,OAAO,CAAE,CAAAE,QAAA,eAClHpP,IAAA,OAAImP,SAAS,CAAC,qCAAqC,CAAAC,QAAA,CAAC,6CAAQ,CAAI,CAAC,cACjEpP,IAAA,QAAKmP,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAE/J,SAAS,CAACI,KAAK,CAAG,GAAG,CAAG,GAAG,CAAM,CAAC,EAC3D,CAAC,CACLJ,SAAS,CAACI,KAAK,eACZzF,IAAA,QAAKmP,SAAS,CAAC,kEAAkE,CAAAC,QAAA,CAC5EzL,WAAW,CAAC4H,MAAM,CAAG,CAAC,cACnBvL,IAAA,OAAImP,SAAS,CAAC,iCAAiC,CAAAC,QAAA,CAC1CzL,WAAW,CAACxB,GAAG,CAACyE,IAAI,eACjB1G,KAAA,OAAkBiP,SAAS,CAAC,yBAAyB,CAAAC,QAAA,eACjDpP,IAAA,SAAMmP,SAAS,CAAC,4BAA4B,CAAAC,QAAA,CAAE3I,cAAc,CAACG,IAAI,CAACG,EAAE,CAAC,CAAO,CAAC,cAC7E7G,KAAA,SAAMiP,SAAS,CAAC,uBAAuB,CAAAC,QAAA,EAAC,IAAE,CAACxI,IAAI,CAACtE,UAAU,EAAI,KAAK,CAAC,GAAC,EAAM,CAAC,GAFvEsE,IAAI,CAACG,EAGV,CACP,CAAC,CACF,CAAC,cACL/G,IAAA,MAAGmP,SAAS,CAAC,uBAAuB,CAAAC,QAAA,CAAC,oFAAiB,CAAG,CAAC,CAC7D,CACR,EACA,CAAC,cACNlP,KAAA,QAAKiP,SAAS,CAAC,MAAM,CAAAC,QAAA,eACjBlP,KAAA,QAAKiP,SAAS,CAAC,8DAA8D,CAACQ,OAAO,CAAEA,CAAA,GAAMT,eAAe,CAAC,MAAM,CAAE,CAAAE,QAAA,eACjHpP,IAAA,OAAImP,SAAS,CAAC,qCAAqC,CAAAC,QAAA,CAAC,2BAAK,CAAI,CAAC,cAC9DpP,IAAA,QAAKmP,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAE/J,SAAS,CAACG,IAAI,CAAG,GAAG,CAAG,GAAG,CAAM,CAAC,EAC1D,CAAC,CACLH,SAAS,CAACG,IAAI,eACXtF,KAAA,QAAKiP,SAAS,CAAC,+CAA+C,CAAAC,QAAA,eAC1DlP,KAAA,QAAKiP,SAAS,CAAC,mEAAmE,CAAAC,QAAA,EAC7EvL,YAAY,CAAC1B,GAAG,CAAEkO,GAAG,eAClBrQ,IAAA,QAAAoP,QAAA,cAAkBlP,KAAA,MAAAkP,QAAA,eAAGlP,KAAA,SAAMiP,SAAS,CAAC,6BAA6B,CAAAC,QAAA,EAAE3I,cAAc,CAAC4J,GAAG,CAAChP,MAAM,CAAC,CAAC,GAAC,EAAM,CAAC,IAAC,CAACgP,GAAG,CAACjI,OAAO,EAAI,CAAC,EAA/GiI,GAAG,CAACtJ,EAAgH,CACjI,CAAC,cACF/G,IAAA,QAAKsH,GAAG,CAAE1C,UAAW,CAAE,CAAC,EACvB,CAAC,cACN1E,KAAA,QAAKiP,SAAS,CAAC,MAAM,CAAAC,QAAA,eACjBpP,IAAA,UAAOsQ,IAAI,CAAC,MAAM,CAACnB,SAAS,CAAC,+DAA+D,CAACG,KAAK,CAAEvL,kBAAmB,CAACwL,QAAQ,CAAGrH,CAAC,EAAKlE,qBAAqB,CAACkE,CAAC,CAACsH,MAAM,CAACF,KAAK,CAAE,CAACiB,UAAU,CAAGrI,CAAC,EAAKA,CAAC,CAAC9F,GAAG,GAAK,OAAO,EAAI+K,eAAe,CAAC,CAAE,CAACyC,QAAQ,CAAE,CAACnL,WAAY,CAAE,CAAC,cACrQzE,IAAA,WAAQmP,SAAS,CAAC,gEAAgE,CAACQ,OAAO,CAAExC,eAAgB,CAACyC,QAAQ,CAAE,CAACnL,WAAW,EAAI,CAACV,kBAAkB,CAACqC,IAAI,CAAC,CAAE,CAAAgJ,QAAA,CAAC,oBAAG,CAAQ,CAAC,EAC9K,CAAC,EACL,CACR,EACA,CAAC,EACL,CAAC,EACH,CAAC,cAENpP,IAAA,UAAAoP,QAAA,CACG;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,CACI,CAAC,EACL,CAAC,CAEV,CAEA,cAAe,CAAAhM,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}